---
title: "TCC"
author: "Bruno Henrique Rodrigues"
date: '2022'
output: pdf_document
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", warning = F, message = F)
```

```{r}
# setwd("~/ufjf/TCC")
options(dplyr.summarise.inform = F)
"%!in%" = Negate("%in%")

library(tidyverse)
# library(readr)
# library(dplyr)
# library(ggplot2)
library(ggrepel)
library(ggpp)
library(reshape2)
# library(dagitty)
library(geobr)
library(descr)
library(lavaan)
library(pcalg)
# devtools::install_github("bips-hb/micd")
library(micd)
# BiocManager::install(c('graph', 'RBGL', 'Rgraphviz'))
library(bnlearn)
```

# DADOS

## LEITURA DOS DADOS

```{r cache = T, cache.lazy = F}
# # aumentando tempo de conexão do R com o servidor (segundos)
# options(timeout = max(600, getOption("timeout")))
# 
# #baixando o arquivo zipado direto do INEP
# temp <- tempfile()
# download.file("https://download.inep.gov.br/microdados/microdados_enem_2021.zip", temp)
# # descompactando o arquivo
# # data <- read.table(unz(temp, "DADOS/MICRODADOS_ENEM_2021.csv"))

enem0 =
  read_delim(unz("microdados_enem_2021.zip", "DADOS/MICRODADOS_ENEM_2021.csv"),
  # read_delim("D:/Users/brodr/Documents/ufjf/TCC/MICRODADOS_ENEM_2021.csv",
             delim = ";",
             escape_double = FALSE,
             col_types = cols(
               NU_INSCRICAO = col_factor(),
               TP_FAIXA_ETARIA = col_factor(
                 c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20")),
               TP_SEXO = col_factor(c("M", "F")),
               TP_ESTADO_CIVIL = col_factor(c("0", "1", "2", "3", "4", "5")),
               TP_NACIONALIDADE = col_factor(c("0", "1", "2", "3", "4")),
               TP_ST_CONCLUSAO = col_factor(c("1", "2", "3", "4")),
               TP_ANO_CONCLUIU = col_factor(c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
               TP_ESCOLA = col_factor(c("1", "2", "3")),
               TP_ENSINO = col_factor(c("1", "2")),
               IN_TREINEIRO = col_factor(c("1", "0")),
               TP_DEPENDENCIA_ADM_ESC = col_factor(c("1", "2", "3", "4")),
               TP_LOCALIZACAO_ESC = col_factor(c("1", "2")),
               TP_SIT_FUNC_ESC = col_factor(c("1", "2", "3", "4")),
               CO_MUNICIPIO_PROVA = col_factor(),
               CO_UF_PROVA = col_factor(),
               TP_PRESENCA_CN = col_factor(c("0", "1", "2")),
               TP_PRESENCA_CH = col_factor(c("0", "1", "2")),
               TP_PRESENCA_LC = col_factor(c("0", "1", "2")),
               TP_PRESENCA_MT = col_factor(c("0", "1", "2")),
               CO_PROVA_CN = col_factor(c("909", "910", "911", "912",
                                          "915", "916", "917", "989",
                                          "990", "991", "992", "996",
                                          "1011", "1012", "1013", "1014",
                                          "1045", "1046", "1047", "1048", "1052")),
               CO_PROVA_CH = col_factor(c("879", "880", "881", "882",
                                          "885", "886", "887", "959",
                                          "960", "961", "962", "966",
                                          "999", "1000", "1001", "1002",
                                          "1015", "1016", "1017", "1018", "1022")),
               CO_PROVA_LC = col_factor(c("889", "890", "891", "892",
                                          "895", "896", "897", "969",
                                          "970", "971", "972", "976",
                                          "1003", "1004", "1005", "1006",
                                          "1025", "1026", "1027", "1028", "1032")),
               CO_PROVA_MT = col_factor(c("899", "900", "901", "902",
                                          "905", "906", "907", "979",
                                          "980", "981", "982", "986",
                                          "1007", "1008", "1009", "1010",
                                          "1035", "1036", "1037", "1038", "1042")),
               TP_LINGUA = col_factor(c("0", "1")),
               TP_STATUS_REDACAO = col_factor(c("1", "2", "3", "4", "5",
                                                "6", "7", "8", "9")),
               Q001 = col_factor(c("A", "B", "C", "D", "E", "F", "G", "H")),
               Q002 = col_factor(c("A", "B", "C", "D", "E", "F", "G", "H")),
               Q003 = col_factor(c("A", "B", "C", "D", "E", "F"),
                                 ordered = T),
               Q004 = col_factor(c("A", "B", "C", "D", "E", "F"),
                                 ordered = T),
               Q005 = col_factor(c("0", "1", "2", "3", "4", "5", "6", "7",
                                   "8", "9", "10", "11", "12", "13", "14",
                                   "15", "16", "17", "18", "19", "20"),
                                 ordered = T),
               Q006 = col_factor(c("A", "B", "C", "D", "E", "F", "G", "H",
                                   "I", "J", "K", "L", "M", "N", "O", "P", "Q"),
                                 ordered = T),
               Q007 = col_factor(c("A", "B", "C", "D"),
                                 ordered = T),
               Q008 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q009 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q010 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q011 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q012 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q013 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q014 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q015 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q016 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q017 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q018 = col_factor(c("A", "B"),
                                 ordered = T),
               Q019 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q020 = col_factor(c("A", "B"),
                                 ordered = T),
               Q021 = col_factor(c("A", "B"),
                                 ordered = T),
               Q022 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q023 = col_factor(c("A", "B"),
                                 ordered = T),
               Q024 = col_factor(c("A", "B", "C", "D", "E"),
                                 ordered = T),
               Q025 = col_factor(c("A", "B"),
                                 ordered = T)),
             trim_ws = TRUE)
unlink(temp)
```

```{r cache = T, cache.lazy = F}
enem1 = enem0 %>%
  mutate(NOTA_FINAL = (NU_NOTA_REDACAO + NU_NOTA_CH + NU_NOTA_CN + ## nota final
                         NU_NOTA_LC +  NU_NOTA_MT)/5, ## nota final
         
         criter_aux = ifelse(Q008 == "A", 0, ## banheiro
                           ifelse(Q008 == "B", 3, ## banheiro
                                  ifelse(Q008 == "C", 7, ## banheiro
                                         ifelse(Q008 == "D", 10, ## banheiro
                                                ifelse(Q008 == "E", 14, 0))))) +
           ifelse(Q007 == "A", 0, ## empregado doméstico
                  ifelse(Q007 == "B", 3, ## empregado doméstico
                         ifelse(Q007 == "C", 7, ## empregado doméstico
                                ifelse(Q007 == "D", 10, ## empregado doméstico
                                       ifelse(Q007 == "E", 13, 0))))) + 
           ifelse(Q010 == "A", 0, ## carro
                  ifelse(Q010 == "B", 3, ## carro
                         ifelse(Q010 == "C", 5, ## carro
                                ifelse(Q010 == "D", 8, ## carro
                                       ifelse(Q010 == "E", 11, 0))))) + ## carro
           ifelse(Q024 == "A", 0, ## carro
                  ifelse(Q024 == "B", 3, ## carro
                         ifelse(Q024 == "C", 6, ## carro
                                ifelse(Q024 == "D", 8, ## carro
                                       ifelse(Q024 == "E", 11, 0))))) + ## computador
           ifelse(Q017 == "A", 0, ## lava louça
                  ifelse(Q017 == "B", 3, ## lava louça
                         ifelse(Q017 == "C", 6, ## lava louça
                                ifelse(Q017 == "D", 8, ## lava louça
                                       ifelse(Q008 == "E", 11, 0))))) + ## lava louça
           ifelse(Q012 == "A", 0, ## geladeira
                  ifelse(Q012 == "B", 2, ## geladeira
                         ifelse(Q012 == "C", 3, ## geladeira
                                ifelse(Q012 == "D", 5, ## geladeira
                                       ifelse(Q012 == "E", 5, 0))))) + ## geladeira
           ifelse(Q013 == "A", 0, ## freezer
                  ifelse(Q013 == "B", 2, ## freezer
                         ifelse(Q013 == "C", 4, ## freezer
                                ifelse(Q013 == "D", 6, ## freezer
                                       ifelse(Q013 == "E", 6, 0))))) + ## freezer
           ifelse(Q014 == "A", 0, ## lava roupa
                  ifelse(Q014 == "B", 2, ## lava roupa
                         ifelse(Q014 == "C", 4, ## lava roupa
                                ifelse(Q014 == "D", 6, ## lava roupa
                                       ifelse(Q014 == "E", 6, 0))))) + ## lava roupa
           ifelse(Q013 == "A", 0, ## dvd
                  ifelse(Q013 == "B", 1, ## dvd
                         ifelse(Q013 == "C", 3, ## dvd
                                ifelse(Q013 == "D", 4, ## dvd
                                       ifelse(Q013 == "E", 6, 0))))) + ## dvd
           ifelse(Q016 == "A", 0, ## microondas
                  ifelse(Q016 == "B", 2, ## microondas
                         ifelse(Q016 == "C", 4, ## microondas
                                ifelse(Q016 == "D", 4, ## microondas
                                       ifelse(Q016 == "E", 4, 0))))) + ## microondas
           ifelse(Q011 == "A", 0, ## motocicleta
                  ifelse(Q011 == "B", 1, ## motocicleta
                         ifelse(Q011 == "C", 3, ## motocicleta
                                ifelse(Q011 == "D", 3, ## motocicleta
                                       ifelse(Q011 == "E", 3, 0))))) + ## motocicleta
           ifelse(Q015 == "A", 0, ## secadora roupa
                  ifelse(Q015 == "B", 2, ## secadora roupa
                         ifelse(Q015 == "C", 2, ## secadora roupa
                                ifelse(Q015 == "D", 2, ## secadora roupa
                                       ifelse(Q015 == "E", 2, 0))))) + ## secadora roupa
           ifelse(Q001 %in% c("A", "B"), 0, ## escolarida chefe da casa
                  ifelse(Q001 %in% c("C"), 1, ## escolarida chefe da casa
                         ifelse(Q001 %in% c("D"), 2, ## escolarida chefe da casa
                                ifelse(Q001 %in% c("E"), 4, ## escolarida chefe da casa
                                       ifelse(Q001 %in% c("F", "G"), 7, 0)))))
         ) %>%
  mutate(CRITERIO = factor(ifelse(criter_aux >= 45, "A",
                                  ifelse(criter_aux >= 38, "B1",
                                         ifelse(criter_aux >= 29, "B2",
                                                ifelse(criter_aux >= 23, "C1",
                                                       ifelse(criter_aux >= 17, "C2",
                                                              ifelse(criter_aux >= 0,
                                                                     "DE")))))),
                           ordered = T),
         CRITERIO2 = factor(ifelse(criter_aux >= 45, "A",
                                   ifelse(criter_aux >= 29, "B",
                                          ifelse(criter_aux >= 17, "C",
                                                 ifelse(criter_aux >= 0, "DE")))),
                            ordered = T),
         REGIAO = factor(
           ifelse(SG_UF_ESC %in% c("RO", "AC", "AM", "RR", "PA", "AP", "TO"), "Norte",
                  ifelse(SG_UF_ESC %in% c("MA", "PI", "CE", "RN", "PB", "PE", "AL", "SE", "BA"),
                         "Nordeste",
                         ifelse(SG_UF_ESC %in% c("MG", "ES", "RJ", "SP"), "Sudeste",
                                ifelse(SG_UF_ESC %in% c("PR", "SC", "RS"), "Sul",
                                       ifelse(SG_UF_ESC %in% c("MS", "MT", "GO", "DF"), "Centro-Oeste",
                                              NA))))))
  )

enem1$TP_FAIXA_ETARIA <- factor(enem1$TP_FAIXA_ETARIA, 
                                levels = c(1:20), 
                                labels = c('Menor de 17 anos', '17 anos',
                                           '18 anos', '19 anos',
                                           '20 anos', '21 anos',
                                           '22 anos',  '23 anos',
                                           '24 anos', '25 anos',
                                           'Entre 26 e 30 anos', 'Entre 31 e 35 anos',
                                           'Entre 36 e 40 anos', 'Entre 41 e 45 anos',
                                           'Entre 46 e 50 anos', 'Entre 51 e 55 anos',
                                           'Entre 56 e 60 anos', 'Entre 61 e 65 anos',
                                           'Entre 66 e 70 anos', 'Maior de 70 anos'),
                                ordered = T)

enem1$IN_TREINEIRO <- factor(enem1$IN_TREINEIRO, levels = c(1,0),  labels=c('Sim', 'Não'))

enem1$TP_DEPENDENCIA_ADM_ESC <- factor(enem1$TP_DEPENDENCIA_ADM_ESC, levels = c(1,2,3,4),
                                       labels=c('Federal',
                                                'Estadual',
                                                'Municipal',
                                                'Privada'))

enem1$TP_LOCALIZACAO_ESC <- factor(enem1$TP_LOCALIZACAO_ESC, levels = c(1,2), labels=c('Urbana', 'Rural'))

enem1$TP_SIT_FUNC_ESC <- factor(enem1$TP_SIT_FUNC_ESC, levels = c(1,2,3,4),
                                    labels=c('Em atividade',
                                             'Paralisada',
                                             'Extinta',
                                             'Escola extinta em anos anteriores'))

enem1$TP_SEXO <- factor(enem1$TP_SEXO, levels = c('M', 'F'), labels=c('Masculino', 'Feminino'))

enem1$TP_ESTADO_CIVIL <- factor(enem1$TP_ESTADO_CIVIL, levels = c(0,1,2,3,4),
                                    labels=c('Não informado',
                                             'Solteiro(a)',
                                             'Casado(a)/Mora com um(a) companheiro(a)',
                                             'Divorciado(a)/Desquitado(a)/Separado(a)',
                                             'Viúvo(a)'))

enem1$TP_COR_RACA <- factor(enem1$TP_COR_RACA, levels = c(0,1,2,3,4,5,6),
                                labels=c('Não declarado',
                                         'Branca', 'Preta',
                                         'Parda', 'Amarela',
                                         'Indígena',
                                         'Não dispõe da informação'))

enem1$TP_NACIONALIDADE <- factor(enem1$TP_NACIONALIDADE, levels = c(0,1,2,3,4),
                                     labels=c('Não informado',
                                              'Brasileiro(a)',
                                              'Brasileiro(a) Naturalizado(a)',
                                              'Estrangeiro(a)',
                                              'Brasileiro(a) Nato(a), nascido(a) no exterior'))

enem1$TP_ST_CONCLUSAO <- factor(enem1$TP_ST_CONCLUSAO, levels = c(1,2,3,4), 
                                    labels=c('Já concluí o Ensino Médio',
                                             'Estou cursando e concluirei o Ensino Médio em 2021',
                                             'Estou cursando e concluirei o Ensino Médio após 2021',
                                             'Não concluí e não estou cursando o Ensino Médio'))

enem1$TP_ANO_CONCLUIU <- factor(enem1$TP_ANO_CONCLUIU, levels = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),
                                    labels=c('Não informado', '2020', '2019', '2018', '2017', '2016',
                                             '2015', '2014', '2013',
                                             '2012', '2011', '2010',
                                             '2009', '2008', '2007',
                                             'Anterior a 2007'))

enem1$TP_ESCOLA <- factor(enem1$TP_ESCOLA, levels = c(1,2,3),
                              labels=c('Não respondeu',
                                       'Pública',
                                       'Privada'))

enem1$TP_ENSINO <- factor(enem1$TP_ENSINO, levels = c(1,2),
                              labels=c('Ensino Regular',
                                       'Educação Especial - Modalidade Substitutiva'))


enem1$TP_PRESENCA_CN <- factor(enem1$TP_PRESENCA_CN, levels = c(0,1,2),
                                    labels=c('Faltou à prova',
                                            'Presente na prova',
                                            'Eliminado na prova'))

enem1$TP_PRESENCA_CH <- factor(enem1$TP_PRESENCA_CH, levels = c(0,1,2),
                                   labels=c('Faltou à prova',
                                            'Presente na prova',
                                            'Eliminado na prova'))

enem1$TP_PRESENCA_LC <- factor(enem1$TP_PRESENCA_LC, levels = c(0,1,2),
                                   labels=c('Faltou à prova',
                                            'Presente na prova',
                                            'Eliminado na prova'))

enem1$TP_PRESENCA_MT <- factor(enem1$TP_PRESENCA_MT, levels = c(0,1,2),
                                   labels=c('Faltou à prova',
                                            'Presente na prova',
                                            'Eliminado na prova'))

enem1$CO_PROVA_CN <- factor(enem1$CO_PROVA_CN, levels = c(909, 910, 911, 912, 915, 916, 917, 989, 990, 991, 992, 996, 1011, 1012, 1013, 1014, 1045, 1046, 1047, 1048, 1052), 
                                labels=c('Azul', 'Amarela', 'Cinza', 'Rosa', 'Laranja - Braille', 'Laranja - Adaptada Ledor',
                                         'Verde - Videoprova - Libras', 'Azul (Reaplicação)', 'Amarela (Reaplicação)', 'Cinza (Reaplicação)',
                                         'Rosa (Reaplicação)', 'Laranja - Adaptada Ledor (Reaplicação)', 'Azul (Digital)', 'Amarela (Digital)',
                                         'Rosa (Digital)', 'Cinza (Digital)', 'Azul (Segunda oportunidade)', 'Amarela (Segunda oportunidade)',
                                         'Cinza (Segunda oportunidade)', 'Rosa (Segunda oportunidade)', 'Laranja - Adaptada Ledor (Segunda oportunidade)'))

enem1$CO_PROVA_CH <- factor(enem1$CO_PROVA_CH, levels = c(879, 880, 881, 882, 885, 886, 887, 959, 960, 961, 962, 966, 999, 1000, 1001, 1002, 1015, 1016, 1017, 1018, 1022), 
                                labels=c('Azul', 'Amarela', 'Branca', 'Rosa', 'Laranja - Braille', 'Laranja - Adaptada Ledor',
                                         'Verde - Videoprova - Libras', 'Azul (Reaplicação)', 'Amarela (Reaplicação)', 'Branca (Reaplicação)',
                                         'Rosa (Reaplicação)', 'Laranja - Adaptada Ledor (Reaplicação)', 'Azul (Digital)', 'Amarela (Digital)',
                                         'Branca (Digital)', 'Rosa (Digital)', 'Azul (Segunda oportunidade)', 'Amarela (Segunda oportunidade)',
                                         'Branca (Segunda oportunidade)', 'Rosa (Segunda oportunidade)', 'Laranja - Adaptada Ledor (Segunda oportunidade)'))

enem1$CO_PROVA_LC <- factor(enem1$CO_PROVA_LC, levels = c(889, 890, 891, 892, 895, 896, 897, 969, 970, 971, 972, 976, 1003, 1004, 1005, 1006, 1025, 1026, 1027, 1028, 1032), 
                                labels=c('Azul', 'Amarela', 'Rosa', 'Branca', 'Laranja - Braille', 'Laranja - Adaptada Ledor',
                                         'Verde - Videoprova - Libras', 'Azul (Reaplicação)', 'Amarela (Reaplicação)', 'Rosa (Reaplicação)',
                                         'Branca (Reaplicação)', 'Laranja - Adaptada Ledor (Reaplicação)', 'Azul (Digital)', 'Amarela (Digital)',
                                         'Branca (Digital)', 'Rosa (Digital)', 'Azul (Segunda oportunidade)', 'Amarela (Segunda oportunidade)',
                                         'Rosa (Segunda oportunidade)', 'Branca (Segunda oportunidade)', 'Laranja - Adaptada Ledor (Segunda oportunidade)'))

enem1$CO_PROVA_MT <- factor(enem1$CO_PROVA_MT, levels = c(899, 900, 901, 902, 905, 906, 907, 979, 980, 981, 982, 986, 1007, 1008, 1009, 1010, 1035, 1036, 1037, 1038, 1042), 
                                labels=c('Azul', 'Amarela', 'Rosa', 'Cinza', 'Laranja - Braille', 'Laranja - Adaptada Ledor',
                                         'Verde - Videoprova - Libras', 'Azul (Reaplicação)', 'Amarela (Reaplicação)',
                                         'Rosa (Reaplicação)', 'Cinza (Reaplicação)', 'Laranja - Adaptada Ledor (Reaplicação)',
                                         'Azul (Digital)', 'Amarela (Digital)', 'Rosa (Digital)', 'Cinza (Digital)',
                                         'Azul (Segunda oportunidade)', 'Amarela (Segunda oportunidade)', 'Cinza (Segunda oportunidade)',
                                         'Rosa (Segunda oportunidade)', 'Laranja - Adaptada Ledor (Segunda oportunidade)'))

enem1$TP_LINGUA <- factor(enem1$ TP_LINGUA, levels = c(0,1),
                                labels=c('Inglês', 'Espanhol'))

enem1$TP_STATUS_REDACAO <- factor(enem1$TP_STATUS_REDACAO, levels = c(1,2,3,4,5,6,7,8,9),
                                      labels=c('Sem problemas',
                                               'Anulada', 'Cópia Texto Motivador',
                                               'Em Branco', 'Fere Direitos Humanos',
                                               'Fuga ao tema',
                                               'Não atendimento ao tipo',
                                               'Texto insuficiente',
                                               'Parte desconectada'))

# # Até que série seu pai, ou o homem responsável por você, estudou?
# enem1$Q001 <- factor(enem1$Q001, levels = c('H', 'A', 'B', 'C', 'D', 'E', 'F', 'G'),
#                      labels=c('Não sei',
#                               'Nunca estudou',
#                               'Não completou a 4ª série/5ª ano do ensino fundamental',
#                               'Completou a 4ª série/5ª ano, mas não completou a 8ª série/9ª ano do ensino fundamental',
#                               'Completou a 8ª série/9ª ano do ensino fundamental, mas não completou o Ensino Médio',
#                               'Completou o Ensino Médio, mas não completou a Faculdade',
#                               'Completou a Faculdade, mas não completou a P?s-graduação',
#                               'Completou a Pós-graduação'),
#                      ordered = T)
# # Até que série sua mãe, ou a mulher responsável por você, estudou?
# enem1$Q002 <- factor(enem1$Q002, levels = c('H', 'A', 'B', 'C', 'D', 'E', 'F', 'G'),
#                      labels=c('Não sei',
#                               'Nunca estudou',
#                               'Não completou a 4ª série/5ª ano do ensino fundamental',
#                               'Completou a 4ª série/5ª ano, mas não completou a 8ª série/9ª ano do ensino fundamental',
#                               'Completou a 8ª série/9ª ano do ensino fundamental, mas não completou o Ensino Médio',
#                               'Completou o Ensino Médio, mas não completou a Faculdade',
#                               'Completou a Faculdade, mas não completou a P?s-graduação',
#                               'Completou a Pós-graduação'),
#                      ordered = T)

# A partir da apresentação de algumas ocupações divididas em grupos ordenados, indique o grupo que contempla a ocupação mais próxima da ocupação do seu pai ou do homem responsável por você. (Se ele não estiver trabalhando, escolha uma ocupação pensando no último trabalho dele).
# enem1$Q003 <- factor(enem1$Q003, levels =  c('A', 'B', 'C', 'D', 'E', 'F'),
#                          labels=c('Grupo 1',
#                                   'Grupo 2',
#                                   'Grupo 3',
#                                   'Grupo 4',
#                                   'Grupo 5',
#                                   'Não Sei'))
# 
# A partir da apresentação de algumas ocupações divididas em grupos ordenados, indique o grupo que contempla a ocupação mais próxima da ocupação da sua mãe ou da mulher responsável por você. (Se ela não estiver trabalhando, escolha uma ocupação pensando no último trabalho dela).
# enem1$Q004 <- factor(enem1$Q004, levels =  c('A', 'B', 'C', 'D', 'E', 'F'),
#                          labels=c('Grupo 1',
#                                   'Grupo 2',
#                                   'Grupo 3',
#                                   'Grupo 4',
#                                   'Grupo 5',
#                                   'Não Sei'))

# Incluindo você, quantas pessoas moram atualmente em sua residência?
enem1$Q005 <- factor(enem1$Q005,
                     levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                                17, 18, 19, 20), 
                     labels=c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
                              '11', '12', '13', '14', '15', '16', '17', '18', '19', '20'),
                     ordered = T)

# # Qual é a renda mensal de sua família? (Some a sua renda com a dos seus familiares.)
# enem1$Q006 <- factor(enem1$Q006,levels =  c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q'),
#                          labels=c('Nenhuma Renda', 'Até R$ 1.100,00', 'De R$ 1.100,01 até R$ 1.650,00',
#                                   'De R$ 1.650,01 até R$ 2.200,00', 'De R$ 2.200,01 até R$ 2.750,00',
#                                   'De R$ 2.750,01 até R$ 3.300,00', 'De R$ 3.300,01 até R$ 4.400,00',
#                                   'De R$ 4.400,01 até R$ 5.500,00', 'De R$ 5.500,01 até R$ 6.600,00',
#                                   'De R$ 6.600,01 até R$ 7.700,00', 'De R$ 7.700,01 até R$ 8.800,00',
#                                   'De R$ 8.800,01 até R$ 9.900,00', 'De R$ 9.900,01 até R$ 11.000,00',
#                                   'De R$ 11.000,01 até R$ 13.200,00', 'De R$ 13.200,01 até R$ 16.500,00',
#                                   'De R$ 16.500,01 até R$ 22.000,00', 'Acima de R$ 22.000,00'))

# Em sua residência trabalha empregado(a) doméstico(a)?
enem1$Q007 <- factor(enem1$Q007, levels = c('A', 'B', 'C', 'D'),
                     labels=c('Não', 'Sim, um ou dois dias por semana',
                              'Sim, três ou quatro dias por semana',
                              'Sim, pelo menos cinco dias por semana'),
                     ordered = T)

# Na sua residência tem banheiro?
enem1$Q008 <- factor(enem1$Q008, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem quartos para dormir?
enem1$Q009 <- factor(enem1$Q009, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem carro?
enem1$Q010 <- factor(enem1$Q010, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem motocicleta?
enem1$Q011 <- factor(enem1$Q011, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem geladeira?
enem1$Q012 <- factor(enem1$Q012, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem freezer (independente ou segunda porta da geladeira)?
enem1$Q013 <- factor(enem1$Q013, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)
# Na sua residência tem máquina de lavar roupa? (o tanquinho NÃO deve ser considerado)
enem1$Q014 <- factor(enem1$Q014, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem máquina de secar roupa (independente ou em conjunto com a máquina de lavar roupa)?
enem1$Q015 <- factor(enem1$Q015, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem forno micro-ondas?
enem1$Q016 <- factor(enem1$Q016, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem máquina de lavar louça?
enem1$Q017 <- factor(enem1$Q017, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem aspirador de pó?
enem1$Q018 <- factor(enem1$Q018, levels = c('A', 'B'), labels=c('Não', 'Sim'))

# Na sua residência tem televisão em cores?
enem1$Q019 <- factor(enem1$Q019, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem aparelho de DVD?
enem1$Q020 <- factor(enem1$Q020, levels = c('A', 'B'), labels=c('Não', 'Sim'))

# Na sua residência tem TV por assinatura?
enem1$Q021 <- factor(enem1$Q021, levels = c('A', 'B'), labels=c('Não', 'Sim'))

# Na sua residência tem telefone celular?
enem1$Q022 <- factor(enem1$Q022, levels = c('A', 'B', 'C', 'D', 'E'),
                         labels=c('Não',
                                  'Sim, um',
                                  'Sim, dois',
                                  'Sim, três',
                                  'Sim, quatro ou mais'),
                     ordered = T)

# Na sua residência tem telefone fixo?
enem1$Q023 <- factor(enem1$Q023, levels = c('A', 'B'), labels=c('Não', 'Sim'))

# Na sua residência tem computador?
enem1$Q024 <- factor(enem1$Q024, levels = c('A', 'B', 'C', 'D', 'E'),
                     labels=c('Não',
                              'Sim, um',
                              'Sim, dois',
                              'Sim, três',
                              'Sim, quatro ou mais'),
                     ordered = T)
# Na sua residência tem acesso à Internet?
enem1$Q025 <- factor(enem1$Q025, levels = c('A', 'B'),
                     labels=c('Não', 'Sim'))


# enem0 = enem0 %>%
#   mutate(NOTA_FINAL = (NU_NOTA_REDACAO + NU_NOTA_CH + NU_NOTA_CN + NU_NOTA_LC +  NU_NOTA_MT)/5)
  
# enem %>% filter(!is.na(NOTA_FINAL))
# enem = enem0 %>%
#   filter(TP_PRESENCA_LC == 1, TP_PRESENCA_MT == 1, TP_PRESENCA_CN == 1, TP_PRESENCA_CH == 1, TP_SIT_FUNC_ESC == 1, IN_TREINEIRO == 0, TP_ST_CONCLUSAO %in% c(1, 2))

#rotulando variável para facilitar gráficos
# levels(enem0$TP_SEXO) = c("Masculino", "Feminino") 
# levels(enem0$TP_ESCOLA) = c("Não Respondeu", "Pública", "Privada")

#filtros
enem = enem1 %>% 
  filter(
    #considerando presença na prova de linguagens 
    TP_PRESENCA_LC == 1, #"Presente na prova"
    
    #considerando presença na prova de matemática 
    TP_PRESENCA_MT == 1, #"Presente na prova"
    
    #considerando presença na prova de ciências da natureza
    TP_PRESENCA_CN == 1, #"Presente na prova"
    
    #considerando presença na prova de ciências humanas
    TP_PRESENCA_CH == 1, #"Presente na prova"
    
    #considerando apenas escolas em atividade
    TP_SIT_FUNC_ESC == 1, #"Em atividade"
    
    #removendo quem não está fazendo o enem pra valer
    IN_TREINEIRO == 0, #"Não"
         
    # #removendo os não respondentes
    # TP_ESCOLA %in% c("Pública", "Privada"), 
    
    # #removendo escolas federais
    # TP_DEPENDENCIA_ADM_ESC %in% c("Estadual", "Municipal", "Privada"), 
    
    #considerando apenas os que já concluíram
    #ou concluirão o ensino médio no mesmo ano desse enem 2021
    TP_ST_CONCLUSAO %in% c("Já concluí o Ensino Médio", "Estou cursando e concluirei o Ensino Médio em 2021"),
    
    #removendo escolas federais e não respostas no tipo de escola
    #e garantindo que o tipo de escola condiz com a administração
    (TP_ESCOLA == "Pública" & TP_DEPENDENCIA_ADM_ESC %in% c("Estadual", "Municipal")) |
      (TP_ESCOLA == "Privada" & TP_DEPENDENCIA_ADM_ESC == "Privada"),
    
    #apenas participante no ensino regular
    TP_ENSINO == "Ensino Regular"
    
    ) 

enem2 = enem %>%
  select(NOTA_FINAL, TP_ESCOLA, TP_SEXO, TP_COR_RACA, 
         REGIAO, CRITERIO, 
         Q025,
         Q001,
         Q002,
         TP_LOCALIZACAO_ESC
         ) %>%
  rename(ESC = TP_ESCOLA,
         COR = TP_COR_RACA,
         REG = REGIAO,
         CRIT = CRITERIO,
         NET = Q025,
         SEX = TP_SEXO,
         NOTA = NOTA_FINAL,
         LOC = TP_LOCALIZACAO_ESC
         )
```

\newpage

## AED

### Frequencia por tipo de escola

```{r}
enem %>%
  # filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(TP_DEPENDENCIA_ADM_ESC) %>%
  summarise(n = n()) %>%
  mutate(freq = round(100*n / sum(n), 2))

enem %>%
  filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(TP_ESCOLA) %>%
  summarise(n = n()) %>%
  mutate(freq = round(100*n / sum(n), 2))

```

### Nota média por tipo de escola

```{r "Nota por tipo de escola"}
enem %>%
  # filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(TP_ESCOLA) %>%
  summarise(NOTA = mean(NOTA_FINAL)) %>%
ggplot(data = ., aes(x = TP_ESCOLA, y = NOTA, fill = TP_ESCOLA)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  theme(legend.position = "none") +
  ggtitle("Nota média por tipo de escola\ne escolaridade do pai") +
  geom_text(aes(label = round(NOTA, 2)), position = position_dodge(.9),
          fontface = "bold") +
  labs(x = "TP_ESCOLA") #+
  # geom_text(aes(label = round(NOTA, 2)), position = position_stack(vjust = .5)) +
  # facet_wrap(~ TP_ESCOLA)
# ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Nota geral_formação paterna_tipo escola.png", width = 14 + 15/64, height = 7 + 43/64)
```

### Porcentagem da renda por tipo de escola

```{r "Porcentagem da renda por tipo de escola"}
enem %>%
  filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
ggplot(aes(x = CRITERIO, group = TP_ESCOLA, fill = TP_ESCOLA)) +
  geom_bar(aes(y = ..prop.., fill = TP_ESCOLA), stat = "count") +
  geom_text(aes(label = scales::percent(..prop.., accuracy = .01), y = ..prop..),
            stat = "count",
            position = position_stack(vjust = .5),
          fontface = "bold") +
  scale_y_continuous(labels = scales::percent) +
  theme_bw() +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # guides(color = guide_legend(nrow = 1)) +
  labs(x = "CRITERIO") #+
  # labs(fill = "Tipo de escola")

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Porcentagem_rend_tipo escola (sem federal).png", width = 14 + 15/64, height = 7 + 43/64)
```

### Escolaridade da mãe por Critério Brasil

```{r "Escolaridade da mãe por Critério Brasil"}
enem %>%
  filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
ggplot(aes(x = CRITERIO, group = Q002, fill = Q002)) +
  geom_bar(aes(y = ..prop.., fill = Q002), stat = "count", position = "dodge") +
  geom_text(aes(label = scales::percent(..prop.., accuracy = .01), y = ..prop..),
            stat = "count",
            position = "dodge",
          fontface = "bold") +
  ggtitle("Grupo de renda por Tipo de escola") +
  scale_y_continuous(labels = scales::percent) +
  theme_bw() +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # guides(color = guide_legend(nrow = 1)) +
  labs(x = NULL) #+
  # labs(fill = "Tipo de escola")

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Porcentagem_rend_tipo escola (sem federal).png", width = 14 + 15/64, height = 7 + 43/64)
```

### Nota por nível de escolaridade do pai, por tipo de escola

```{r "Nota por nível de escolaridade do pai, por tipo de escola"}
enem %>%
  # filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(Q001, TP_ESCOLA) %>%
  summarise(NOTA = mean(NOTA_FINAL)) %>%
ggplot(data = ., aes(x = Q001, y = NOTA, fill = TP_ESCOLA)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  theme(legend.position = "none") +
  ggtitle("Nota média por tipo de escola\ne escolaridade do pai") +
  geom_text(aes(label = round(NOTA, 2)), position = position_dodge(.9),
          fontface = "bold") #+
  # geom_text(aes(label = round(NOTA, 2)), position = position_stack(vjust = .5)) +
  # facet_wrap(~ TP_ESCOLA)
# ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Nota geral_formação paterna_tipo escola.png", width = 14 + 15/64, height = 7 + 43/64)
```

### Nota por nível de escolaridade da mãe, por tipo de escola

```{r "Nota por nível de escolaridade da mãe, por tipo de escola"}
enem %>%
  # filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(Q002, TP_ESCOLA) %>%
  summarise(NOTA = mean(NOTA_FINAL)) %>%
ggplot(data = ., aes(x = Q002, y = NOTA, fill = TP_ESCOLA)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  theme(legend.position = "none") +
  ggtitle("Nota média por tipo de escola\ne escolaridade da mãe") +
  geom_text(aes(label = round(NOTA, 2)),
            position = position_dodge(.9),
            fontface = "bold",
            vjust = 0) #+
  # geom_text(aes(label = round(NOTA, 2)), position = position_stack(vjust = .5)) +
  # facet_wrap(~ TP_ESCOLA)
# ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Nota geral_formação materna_tipo escola.png", width = 14 + 15/64, height = 7 + 43/64)
```

### Nota por região IBGE, por tipo de escola

```{r "Nota por região IBGE, por tipo de escola"}
enem %>%
  filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(REGIAO, TP_ESCOLA) %>%
  summarise(NOTA = mean(NOTA_FINAL)) %>%
ggplot(aes(x = REGIAO, y = NOTA, fill = TP_ESCOLA)) +
  geom_bar(stat = "identity", position = "dodge") +
  # scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
  # facet_wrap(~ TP_ESCOLA) +
  theme_bw() +
  # scale_x_discrete(name = "") +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # guides(color = guide_legend(nrow = 1)) +
  labs(x = NULL) +
  ggtitle("Nota média por tipo de escola e região IBGE") +
  geom_text(aes(label = round(NOTA, 2)), position = position_dodge(.9),
          fontface = "bold", vjust = 0)

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Nota geral_Regiao_tipo escola (sem federal).png", width = 14 + 15/64, height = 7 + 43/64)
```

### Critério por Região

```{r "Criterio por Região"}
enem %>%
  # filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
ggplot(aes(x = REGIAO, group = CRITERIO, fill = CRITERIO)) +
  geom_bar(aes(y = ..prop.., fill = CRITERIO), stat = "count", position = "dodge") +
  geom_text(aes(label = scales::percent(..prop.., accuracy = .01), y = ..prop..),
            stat = "count",
            position = position_dodge(.9),
          fontface = "bold") +
  ggtitle("Critério por Região") +
  scale_y_continuous(labels = scales::percent) +
  theme_bw() +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # guides(color = guide_legend(nrow = 1)) +
  labs(x = NULL) #+
  # labs(fill = "Tipo de escola")

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Porcentagem_Criterio_região (com federal).png", width = 14 + 15/64, height = 7 + 43/64)
```

```{r "Criterio por Região 2"}
enem %>%
  # filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
ggplot(aes(x = REGIAO, group = CRITERIO, fill = CRITERIO)) +
  geom_bar(aes(y = ..count../tapply(..count.., ..x.. ,sum)[..x..]), stat = "count", position = "dodge") +
  geom_text(aes(label = scales::percent(..count../tapply(..count.., ..x.. ,sum)[..x..], accuracy = .01), y = ..count../tapply(..count.., ..x.. ,sum)[..x..]),
            stat = "count",
            position = position_dodge(.95),
          fontface = "bold") +
  ggtitle("a. Proporção de Critério Brasil por Região IBGE") +
  scale_y_continuous(labels = scales::percent) +
  theme_bw() +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # guides(color = guide_legend(nrow = 1)) +
  labs(x = "REGIAO") #+
  # labs(fill = "Tipo de escola")

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Porcentagem_Criterio_região (com federal).png", width = 14 + 15/64, height = 7 + 43/64)
```

### Nota por Critério Brasil, por região

```{r "Nota por região IBGE, por tipo de escola"}
enem %>%
  filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(REGIAO, CRITERIO) %>%
  summarise(NOTA = mean(NOTA_FINAL)) %>%
ggplot(aes(x = REGIAO, y = NOTA, fill = CRITERIO)) +
  geom_bar(stat = "identity", position = "dodge") +
  # scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
  # facet_wrap(~ TP_ESCOLA) +
  theme_bw() +
  # scale_x_discrete(name = "") +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # guides(color = guide_legend(nrow = 1)) +
  labs(x = "REGIAO") +
  ggtitle("b. Nota média por Critério Brasil") +
  geom_text(aes(label = round(NOTA, 2)), position = position_dodge(.9),
          fontface = "bold", vjust = 0)

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Nota geral_Criterio_Regiao (sem federal).png", width = 14 + 15/64, height = 7 + 43/64)
```

```{r "Nota por região IBGE, por tipo de escola"}
enem %>%
  filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(REGIAO, CRITERIO) %>%
  summarise(NOTA = mean(NOTA_FINAL)) %>%
ggplot(aes(x = CRITERIO, y = NOTA, fill = REGIAO)) +
  geom_bar(stat = "identity", position = "dodge") +
  # scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
  # facet_wrap(~ TP_ESCOLA) +
  theme_bw() +
  # scale_x_discrete(name = "") +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # guides(color = guide_legend(nrow = 1)) +
  labs(x = NULL) +
  ggtitle("Nota média por Critério Brasil e região IBGE") +
  geom_text(aes(label = round(NOTA, 2)), position = position_dodge(.9),
          fontface = "bold", vjust = 0)

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Nota geral_Criterio_Regiao (sem federal) v2.png", width = 14 + 15/64, height = 7 + 43/64)
```

### Nota por Critério Brasil, por tipo de escola

```{r "Nota por Critério Brasil, por tipo de escola"}
enem %>%
  # filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(CRITERIO, TP_ESCOLA) %>%
  summarise(NOTA = mean(NOTA_FINAL)) %>%
ggplot(aes(x = CRITERIO, y = NOTA, fill = TP_ESCOLA)) +
  geom_bar(stat = "identity", position = "dodge") +
  # scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
  # facet_wrap(~ TP_ESCOLA) +
  theme_bw() +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # theme(legend.position = "none") +
  labs(x = "CRITERIO") +
  # ggtitle("Nota média por tipo de escola e Critério Brasil") +
  geom_text(aes(label = round(NOTA, 2)), position = position_dodge(.9),
            fontface = "bold", vjust = 0)

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/Nota geral_Criterio_tipo escola (com federal).png", width = 14 + 15/64, height = 7 + 43/64)

# ggplot(data = enem, aes(x = Q006, group = TP_SEXO, fill = TP_SEXO)) +
#   geom_bar(aes(y = ..prop.., stat = "count", fill = TP_SEXO)) +
#   geom_text(aes(label = scales::percent(..prop.., accuracy = .01), y = ..prop..),
#             stat = "count",
#             position = position_stack(vjust = .5)) +
#   ggtitle("Grupo de renda por Sexo") +
#   scale_y_continuous(labels = scales::percent) +
#   theme_bw() +
#   labs(fill = "Sexo") +
#   scale_fill_manual(values = c("#00BFC4", "#F8766D")) +
#   facet_wrap(~ TP_ESCOLA)
```

### Nota por Renda, por tipo de escola

```{r "Nota por Renda, por tipo de escola"}
enem %>%
  filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
  group_by(Q006, TP_ESCOLA) %>%
  summarise(NOTA = mean(NOTA_FINAL)) %>%
ggplot(data = ., aes(x = Q006, y = NOTA, fill = TP_ESCOLA)) +
  geom_bar(stat = "identity", position = "dodge") +
  # scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
  # facet_wrap(~ TP_ESCOLA) +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  ggtitle("Nota média por tipo de escola e Renda média familiar") +
  theme_bw() +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # theme(legend.position = "none") +
  labs(x = NULL) +
  geom_text(aes(label = round(NOTA, 2)), position = position_dodge(.9),
            fontface = "bold", vjust = 0)
```

### Porcentagem da renda por tipo de escola

```{r "Porcentagem da renda por tipo de escola"}
enem %>%
  filter(TP_DEPENDENCIA_ADM_ESC != "Federal") %>%
ggplot(aes(x = Q006, group = TP_ESCOLA, fill = TP_ESCOLA)) +
  geom_bar(aes(y = ..prop.., fill = TP_ESCOLA), stat = "count") +
  geom_text(aes(label = scales::percent(..prop.., accuracy = .01), y = ..prop..),
            stat = "count",
            position = position_stack(vjust = .5)) +
  ggtitle("Grupo de renda por Sexo") +
  scale_y_continuous(labels = scales::percent) +
  # scale_fill_manual(values = c("#00BFC4", "#F8766D")) +
  theme_bw() +
  theme(legend.position = c(.075, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # theme(legend.position = "none") +
  labs(x = NULL) +
  geom_text(aes(label = scales::percent(..prop.., accuracy = .01), y = ..prop..),
            stat = "count",
            position = position_stack(vjust = .5),
          fontface = "bold") +
  facet_wrap(~ TP_SEXO)
```

```{r}
ggplot(data = enem, aes(x = Q006, group = TP_ESCOLA, fill = TP_ESCOLA)) +
  geom_bar(aes(y = ..prop.., fill = TP_ESCOLA), stat = "count") +
  geom_text(aes(label = scales::percent(..prop.., accuracy = .01), y = ..prop..),
            stat = "count",
            position = position_stack(vjust = .5)) +
  ggtitle("Grupo de renda por Tipo de escola") +
  scale_y_continuous(labels = scales::percent) +
  theme_bw() +
  labs(fill = "Tipo de escola") +
  facet_wrap(~ TP_SEXO)
```

### Nota média geral, por admnistração da escola. Apresentar o valor numérico em um gráfico de barras

```{r "Nota média geral, por admnistração da escola"}
enem %>%
  filter(TP_DEPENDENCIA_ADM_ESC %!in% c("Federal")) %>%
  group_by(TP_DEPENDENCIA_ADM_ESC) %>% 
  summarise(NOTA_FINAL = mean(NOTA_FINAL), NOTA_LC = mean(NU_NOTA_LC), NOTA_MT = mean(NU_NOTA_MT), NOTA_CN = mean(NU_NOTA_CN), NOTA_CH = mean(NU_NOTA_CH), NOTA_REDACAO = mean(NU_NOTA_REDACAO)) %>%
  melt("TP_DEPENDENCIA_ADM_ESC")%>%
  group_by(variable, TP_DEPENDENCIA_ADM_ESC) %>%
ggplot(aes(x = variable, y = value, group = TP_DEPENDENCIA_ADM_ESC, fill = TP_DEPENDENCIA_ADM_ESC)) +
  geom_bar(stat = "identity", position = position_dodge(0.95)) +
  geom_text(aes(label = round(..y.., 2)), position = position_dodge(.9),
            fontface = "bold", vjust = 0) +
  ggtitle("Notas por Administração da escola") +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  theme_bw() +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # theme(legend.position = "none") +
  labs(x = NULL)
```

```{r "Nota média geral, por tipo da escola"}
enem %>%
  # filter(TP_DEPENDENCIA_ADM_ESC %in% c("Federal", "Privada")) %>%
  # filter(TP_DEPENDENCIA_ADM_ESC %!in% c("Federal")) %>%
  group_by(TP_ESCOLA) %>% 
  summarise(NOTA_FINAL = mean(NOTA_FINAL), PORTUGUES = mean(NU_NOTA_LC), MATEMATICA = mean(NU_NOTA_MT), CIENCIAS_NATUREZA = mean(NU_NOTA_CN), CIENCIAS_HUMANAS = mean(NU_NOTA_CH), REDACAO = mean(NU_NOTA_REDACAO)) %>%
  melt("TP_ESCOLA")%>%
  group_by(variable, TP_ESCOLA) %>%
ggplot(aes(x = variable, y = value, group = TP_ESCOLA, fill = TP_ESCOLA)) +
  geom_bar(stat = "identity", position = position_dodge(0.9)) +
  geom_text(aes(label = round(..y.., 2)), position = position_dodge(.9),
            fontface = "bold", vjust = 0) +
  ggtitle(NULL) +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  # scale_x_discrete(name = "Competência") +
  theme_bw() +
  theme(legend.position = c(.5, .95),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        legend.background = element_rect(color = "transparent", fill = "transparent")) +
  # theme(legend.position = "none") +
  labs(x = "Competência")
```

```{r "Nota média geral por tipo escola"}
enem %>%
  group_by(TP_ESCOLA) %>% 
  summarise(NOTA = mean(NOTA_FINAL)) %>% 
  ggplot(data = ., aes(y = NOTA, x = TP_ESCOLA, fill = TP_ESCOLA)) +
  geom_bar(stat = "identity") +
  scale_x_discrete(name = "Tipo de escola do Ensino Médio") +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  theme_bw() +
  theme(legend.position = "none") +
  ggtitle("Nota média geral\npor tipo de escola") +
  geom_text(aes(label = round(NOTA, 2)), vjust = -.1)
```

### Nota média geral, por classe de rendimento

```{r}
enem %>%
  filter(!is.na(Q006)) %>%
  group_by(TP_ESCOLA, Q006) %>% 
  summarise(NOTA = mean(NOTA_FINAL)) %>% 
  ggplot(data = ., aes(y = NOTA, x = Q006, color = TP_ESCOLA, group = TP_ESCOLA)) +
  geom_point() +
  geom_line() +
  # theme(legend.position = "none") +
  ggtitle("Nota média Geral\npor Renda média familiar") +
  scale_y_continuous(limits = c(0, 1000), name = "Nota Média") +
  # geom_text(aes(label = round(NOTA, 2), group = TP_ESCOLA), position = position_dodge(width = 1)) +
  geom_text_repel(aes(y = NOTA, fill = TP_ESCOLA, label = format(round(NOTA, 2), 2)), fontface = "bold") +
  theme_bw() +
  scale_fill_discrete(name = "Tipo de Escola") +
  scale_color_discrete(name = "Tipo de Escola") +
  scale_x_discrete("Grupo de Renda")
```

\newpage

### DADOS DO PARTICIPANTE

#### Faixa etária

* 1	Menor de 17 anos
* 2	17 anos
* 3	18 anos
* 4	19 anos
* 5	20 anos
* 6	21 anos
* 7	22 anos
* 8	23 anos
* 9	24 anos
* 10	25 anos
* 11	Entre 26 e 30 anos
* 12	Entre 31 e 35 anos
* 13	Entre 36 e 40 anos
* 14	Entre 41 e 45 anos
* 15	Entre 46 e 50 anos
* 16	Entre 51 e 55 anos
* 17	Entre 56 e 60 anos
* 18	Entre 61 e 65 anos
* 19	Entre 66 e 70 anos
* 20	Maior de 70 anos

```{r echo = F}
ggplot(data = enem, aes(x = TP_FAIXA_ETARIA)) +
  geom_bar()
```

#### Sexo

* M	Masculino
* F	Feminino 

```{r echo = F}
ggplot(data = enem, aes(x = TP_SEXO, fill = TP_SEXO)) +
  geom_bar()
```

#### Estado civil

* 0	Não informado
* 1	Solteiro(a)
* 2	Casado(a)/Mora com companheiro(a)
* 3	Divorciado(a)/Desquitado(a)/Separado(a)
* 4	Viúvo(a)

```{r echo = F}
ggplot(data = enem, aes(x = TP_ESTADO_CIVIL, fill = TP_ESTADO_CIVIL)) +
  geom_bar()
```

#### Cor/raça

* 0	Não declarado
* 1	Branca
* 2	Preta
* 3	Parda
* 4	Amarela
* 5	Indígena 
* 6	Não dispõe da informação

```{r echo = F}
ggplot(data = enem, aes(x = TP_COR_RACA, fill = TP_COR_RACA)) +
  geom_bar() + 
  facet_wrap(~TP_ESCOLA)
```

#### Nacionalidade

* 0	Não informado
* 1	Brasileiro(a)
* 2	Brasileiro(a) Naturalizado(a)
* 3	Estrangeiro(a)
* 4	Brasileiro(a) Nato(a), nascido(a) no exterior

```{r echo = F}
ggplot(data = enem, aes(x = TP_NACIONALIDADE, fill = TP_NACIONALIDADE)) +
  geom_bar()
```

#### Situação de conclusão do Ensino Médio

* 1	Já concluí o Ensino Médio
* 2	Estou cursando e concluirei o Ensino Médio em 2021
* 3	Estou cursando e concluirei o Ensino Médio após 2021
* 4	Não concluí e não estou cursando o Ensino Médio

```{r echo = F}
ggplot(data = enem, aes(x = TP_ST_CONCLUSAO, fill = TP_ST_CONCLUSAO)) +
  geom_bar()
```

#### Ano de Conclusão do Ensino Médio

* 0	Não informado
* 1	2020
* 2	2019
* 3	2018
* 4	2017
* 5	2016
* 6	2015
* 7	2014
* 8	2013
* 9	2012
* 10	2011
* 11	2010
* 12	2009
* 13	2008
* 14	2007
* 15	Antes de 2007

```{r echo = F}
ggplot(data = enem, aes(x = TP_ANO_CONCLUIU, fill = TP_ANO_CONCLUIU)) +
  geom_bar()
```

#### Tipo de escola do Ensino Médio

* 1	Não Respondeu
* 2	Pública
* 3	Privada

```{r echo = F}
ggplot(data = enem, aes(x = TP_ESCOLA, fill = TP_ESCOLA)) +
  geom_bar()
```

#### Tipo de instituição que concluiu ou concluirá o Ensino Médio 

* 1	Ensino Regular
* 2	Educação Especial - Modalidade Substitutiva

```{r echo = F}
ggplot(data = enem, aes(x = TP_ENSINO, fill = TP_ENSINO)) +
  geom_bar()
```

#### Treineiro

* 1	Sim
* 0	Não

```{r echo = F}
ggplot(data = enem, aes(x = IN_TREINEIRO, fill = IN_TREINEIRO)) +
  geom_bar()
```

### DADOS DA ESCOLA

#### Dependência administrativa (Escola)

* 1	Federal
* 2	Estadual
* 3	Municipal
* 4	Privada

```{r echo = F}
ggplot(data = enem, aes(x = TP_DEPENDENCIA_ADM_ESC, fill = TP_DEPENDENCIA_ADM_ESC)) +
  geom_bar()
```

#### Localização (Escola)

* 1	Urbana
* 2	Rural

```{r echo = F}
ggplot(data = enem, aes(x = TP_LOCALIZACAO_ESC, fill = TP_LOCALIZACAO_ESC)) +
  geom_bar()
```

#### Situação de funcionamento (Escola)

* 1	Em atividade
* 2	Paralisada
* 3	Extinta
* 4	Escola extinta em anos anteriores.

```{r echo = F}
ggplot(data = enem, aes(x = TP_SIT_FUNC_ESC, fill = TP_SIT_FUNC_ESC)) +
  geom_bar()
```

### DADOS DA PROVA OBJETIVA

#### Presença na prova objetiva de Ciências da Natureza

* 0	Faltou à prova
* 1	Presente na prova
* 2	Eliminado na prova

```{r echo = F}
ggplot(data = enem, aes(x = TP_PRESENCA_CN, fill = TP_PRESENCA_CN)) +
  geom_bar()
```

#### Presença na prova objetiva de Ciências Humanas

* 0	Faltou à prova
* 1	Presente na prova
* 2	Eliminado na prova

```{r echo = F}
ggplot(data = enem, aes(x = TP_PRESENCA_CH, fill = TP_PRESENCA_CH)) +
  geom_bar()
```

#### Presença na prova objetiva de Linguagens e Códigos

* 0	Faltou à prova
* 1	Presente na prova
* 2	Eliminado na prova

```{r echo = F}
ggplot(data = enem, aes(x = TP_PRESENCA_LC, fill = TP_PRESENCA_LC)) +
  geom_bar()
```

#### Presença na prova objetiva de Matemática

* 0	Faltou à prova
* 1	Presente na prova
* 2	Eliminado na prova

```{r echo = F}
ggplot(data = enem, aes(x = TP_PRESENCA_MT, fill = TP_PRESENCA_MT)) +
  geom_bar()
```

#### Código do tipo de prova de Ciências da Natureza

* 909	Azul
* 910	Amarela
* 911	Cinza
* 912	Rosa
* 915	Laranja - Braille
* 916	Laranja - Adaptada Ledor
* 917	Verde - Videoprova - Libras
* 989	Azul (Reaplicação)
* 990	Amarela (Reaplicação)
* 991	Cinza (Reaplicação)
* 992	Rosa (Reaplicação)
* 996	Laranja - Adaptada Ledor (Reaplicação)
* 1011	Azul (Digital)
* 1012	Amarela (Digital)
* 1013	Rosa (Digital)
* 1014	Cinza (Digital)
* 1045	Azul (Segunda oportunidade)
* 1046	Amarela (Segunda oportunidade)
* 1047	Cinza (Segunda oportunidade)
* 1048	Rosa (Segunda oportunidade)
* 1052	Laranja - Adaptada Ledor (Segunda oportunidade)

```{r echo = F}
ggplot(data = enem, aes(x = CO_PROVA_CN, fill = CO_PROVA_CN)) +
  geom_bar()
```
 
#### Código do tipo de prova de Ciências Humanas

* 879	Azul
* 880	Amarela
* 881	Branca
* 882	Rosa
* 885	Laranja - Braille
* 886	Laranja - Adaptada Ledor
* 887	Verde - Videoprova - Libras
* 959	Azul (Reaplicação)
* 960	Amarela (Reaplicação)
* 961	Branca (Reaplicação)
* 962	Rosa (Reaplicação)
* 966	Laranja - Adaptada Ledor (Reaplicação)
* 999	Azul (Digital)
* 1000	Amarela (Digital)
* 1001	Branca (Digital)
* 1002	Rosa (Digital)
* 1015	Azul (Segunda oportunidade)
* 1016	Amarela (Segunda oportunidade)
* 1017	Branca (Segunda oportunidade)
* 1018	Rosa (Segunda oportunidade)
* 1022	Laranja - Adaptada Ledor (Segunda oportunidade)

```{r echo = F}
ggplot(data = enem, aes(x = CO_PROVA_CH, fill = CO_PROVA_CH)) +
  geom_bar()
```

#### Código do tipo de prova de Linguagens e Códigos

* 889	Azul
* 890	Amarela
* 891	Rosa
* 892	Branca
* 895	Laranja - Braille
* 896	Laranja - Adaptada Ledor
* 897	Verde - Videoprova - Libras
* 969	Azul (Reaplicação)
* 970	Amarela (Reaplicação)
* 971	Rosa (Reaplicação)
* 972	Branca (Reaplicação)
* 976	Laranja - Adaptada Ledor (Reaplicação)
* 1003	Azul (Digital)
* 1004	Amarela (Digital)
* 1005	Branca (Digital)
* 1006	Rosa (Digital)
* 1025	Azul (Segunda oportunidade)
* 1026	Amarela (Segunda oportunidade)
* 1027	Rosa (Segunda oportunidade)
* 1028	Branca (Segunda oportunidade)
* 1032	Laranja - Adaptada Ledor (Segunda oportunidade)

```{r echo = F}
ggplot(data = enem, aes(x = CO_PROVA_LC, fill = CO_PROVA_LC)) +
  geom_bar()
```

#### Código do tipo de prova de Matemática

* 899	Azul
* 900	Amarela
* 901	Rosa
* 902	Cinza
* 905	Laranja - Braille
* 906	Laranja - Adaptada Ledor
* 907	Verde - Videoprova - Libras
* 979	Azul (Reaplicação)
* 980	Amarela (Reaplicação)
* 981	Rosa (Reaplicação)
* 982	Cinza (Reaplicação)
* 986	Laranja - Adaptada Ledor (Reaplicação)
* 1007	Azul (Digital)
* 1008	Amarela (Digital)
* 1009	Rosa (Digital)
* 1010	Cinza (Digital)
* 1035	Azul (Segunda oportunidade)
* 1036	Amarela (Segunda oportunidade)
* 1037	Cinza (Segunda oportunidade)
* 1038	Rosa (Segunda oportunidade)
* 1042	Laranja - Adaptada Ledor (Segunda oportunidade)

```{r echo = F}
ggplot(data = enem, aes(x = CO_PROVA_MT, fill = CO_PROVA_MT)) +
  geom_bar()
```

#### Nota da prova de Ciências da Natureza

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_CN)) +
  geom_boxplot()
```

#### Nota da prova de Ciências Humanas

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_CH)) +
  geom_boxplot()
```

#### Nota da prova de Linguagens e Códigos

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_LC)) +
  geom_boxplot()
```

#### Nota da prova de Matemática

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_MT)) +
  geom_boxplot()
```

#### Língua Estrangeira 

0	Inglês
1	Espanhol

```{r echo = F}
ggplot(data = enem, aes(x = TP_LINGUA, fill = TP_LINGUA)) +
  geom_bar()
```

### DADOS DA REDAÇÃO

#### Situação da redação do participante

* 1	Sem problemas
* 2	Anulada
* 3	Cópia Texto Motivador
* 4	Em Branco
* 6	Fuga ao tema
* 7	Não atendimento ao tipo textual
* 8	Texto insuficiente
* 9	Parte desconectada

```{r echo = F}
ggplot(data = enem, aes(x = TP_STATUS_REDACAO, fill = TP_STATUS_REDACAO)) +
  geom_bar()
```

#### Nota da competência 1

* Demonstrar domínio da modalidade escrita formal da Língua Portuguesa.

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_COMP1)) +
  geom_boxplot()
```

#### Nota da competência 2

* Compreender a proposta de redação e aplicar conceitos das várias áreas de conhecimento para desenvolver o tema, dentro dos limites estruturais do texto dissertativo-argumentativo em prosa.

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_COMP2)) +
  geom_boxplot()
```

#### Nota da competência 3

* Selecionar, relacionar, organizar e interpretar informações, fatos, opiniões e argumentos em defesa de um ponto de vista.

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_COMP3)) +
  geom_boxplot()
```

#### Nota da competência 4

* Demonstrar conhecimento dos mecanismos linguísticos necessários para a construção da argumentação.

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_COMP4)) +
  geom_boxplot()
```

#### Nota da competência 5

* Elaborar proposta de intervenção para o problema abordado, respeitando os direitos humanos.

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_COMP5)) +
  geom_boxplot()
```

#### Nota da prova de redação

```{r echo = F}
ggplot(data = enem, aes(x = NU_NOTA_REDACAO)) +
  geom_boxplot()
```

### DADOS DO QUESTIONÁRIO SOCIOECONÔMICO					

#### Q001

Até que série seu pai, ou o homem responsável por você, estudou?

* A	Nunca estudou.
* B	Não completou a 4ª série/5º ano do Ensino Fundamental.
* C	Completou a 4ª série/5º ano, mas não completou a 8ª série/9º ano do Ensino Fundamental.
* D	Completou a 8ª série/9º ano do Ensino Fundamental, mas não completou o Ensino Médio.
* E	Completou o Ensino Médio, mas não completou a Faculdade.
* F	Completou a Faculdade, mas não completou a Pós-graduação.
* G	Completou a Pós-graduação.
* H	Não sei.

```{r echo = F}
ggplot(data = enem, aes(x = Q001, fill = Q001)) +
  geom_bar()
```

#### Q002

Até que série sua mãe, ou a mulher responsável por você, estudou?

* A	Nunca estudou.
* B	Não completou a 4ª série/5º ano do Ensino Fundamental.
* C	Completou a 4ª série/5º ano, mas não completou a 8ª série/9º ano do Ensino Fundamental.
* D	Completou a 8ª série/9º ano do Ensino Fundamental, mas não completou o Ensino Médio.
* E	Completou o Ensino Médio, mas não completou a Faculdade.
* F	Completou a Faculdade, mas não completou a Pós-graduação.
* G	Completou a Pós-graduação.
* H	Não sei.

```{r echo = F}
ggplot(data = enem, aes(x = Q002, fill = Q002)) +
  geom_bar()
```

#### Q003

A partir da apresentação de algumas ocupações divididas em grupos ordenados, indique o grupo que contempla a ocupação mais próxima da ocupação do seu pai ou do homem responsável por você. (Se ele não estiver trabalhando, escolha uma ocupação pensando no último trabalho dele).

* A	Grupo 1: Lavrador, agricultor sem empregados, bóia fria, criador de animais (gado, porcos, galinhas, ovelhas, cavalos etc.), apicultor, pescador, lenhador, seringueiro, extrativista.
* B	Grupo 2: Diarista, empregado doméstico, cuidador de idosos, babá, cozinheiro (em casas particulares), motorista particular, jardineiro, faxineiro de empresas e prédios, vigilante, porteiro, carteiro, office-boy, vendedor, caixa, atendente de loja, auxiliar administrativo, recepcionista, servente de pedreiro, repositor de mercadoria.
* C	Grupo 3: Padeiro, cozinheiro industrial ou em restaurantes, sapateiro, costureiro, joalheiro, torneiro mecânico, operador de máquinas, soldador, operário de fábrica, trabalhador da mineração, pedreiro, pintor, eletricista, encanador, motorista, caminhoneiro, taxista.
* D	Grupo 4: Professor (de ensino fundamental ou médio, idioma, música, artes etc.), técnico (de enfermagem, contabilidade, eletrônica etc.), policial, militar de baixa patente (soldado, cabo, sargento), corretor de imóveis, supervisor, gerente, mestre de obras, pastor, microempresário (proprietário de empresa com menos de 10 empregados), pequeno comerciante, pequeno proprietário de terras, trabalhador autônomo ou por conta própria.
* E	Grupo 5: Médico, engenheiro, dentista, psicólogo, economista, advogado, juiz, promotor, defensor, delegado, tenente, capitão, coronel, professor universitário, diretor em empresas públicas ou privadas, político, proprietário de empresas com mais de 10 empregados.
* F	Não sei.

```{r echo = F}
ggplot(data = enem, aes(x = Q003, fill = Q003)) +
  geom_bar() 
```

#### Q004

A partir da apresentação de algumas ocupações divididas em grupos ordenados, indique o grupo que contempla a ocupação mais próxima da ocupação da sua mãe ou da mulher responsável por você. (Se ela não estiver trabalhando, escolha uma ocupação pensando no último trabalho dela).

* A	Grupo 1: Lavradora, agricultora sem empregados, bóia fria, criadora de animais (gado, porcos, galinhas, ovelhas, cavalos etc.), apicultora, pescadora, lenhadora, seringueira, extrativista.
* B	Grupo 2: Diarista, empregada doméstica, cuidadora de idosos, babá, cozinheira (em casas particulares), motorista particular, jardineira, faxineira de empresas e prédios, vigilante, porteira, carteira, office-boy, vendedora, caixa, atendente de loja, auxiliar administrativa, recepcionista, servente de pedreiro, repositora de mercadoria.
* C	Grupo 3: Padeira, cozinheira industrial ou em restaurantes, sapateira, costureira, joalheira, torneira mecânica, operadora de máquinas, soldadora, operária de fábrica, trabalhadora da mineração, pedreira, pintora, eletricista, encanadora, motorista, caminhoneira, taxista.
* D	Grupo 4: Professora (de ensino fundamental ou médio, idioma, música, artes etc.), técnica (de enfermagem, contabilidade, eletrônica etc.), policial, militar de baixa patente (soldado, cabo, sargento), corretora de imóveis, supervisora, gerente, mestre de obras, pastora, microempresária (proprietária de empresa com menos de 10 empregados), pequena comerciante, pequena proprietária de terras, trabalhadora autônoma ou por conta própria.
* E	Grupo 5: Médica, engenheira, dentista, psicóloga, economista, advogada, juíza, promotora, defensora, delegada, tenente, capitã, coronel, professora universitária, diretora em empresas públicas ou privadas, política, proprietária de empresas com mais de 10 empregados.
* F	Não sei.

```{r echo = F}
ggplot(data = enem, aes(x = Q004, fill = Q004)) +
  geom_bar() 
```

#### Q005

Incluindo você, quantas pessoas moram atualmente em sua residência?

```{r echo = F}
ggplot(data = enem, aes(x = Q005)) +
  geom_boxplot() 
```

#### Q006

Qual é a renda mensal de sua família? (Some a sua renda com a dos seus familiares.)

* A	Nenhuma Renda
* B	Até R$ 1.100,00
* C	De R\$ 1.100,01 até R\$ 1.650,00.
* D	De R\$ 1.650,01 até R\$ 2.200,00.
* E	De R\$ 2.200,01 até R\$ 2.750,00.
* F	De R\$ 2.750,01 até R\$ 3.300,00.
* G	De R\$ 3.300,01 até R\$ 4.400,00.
* H	De R\$ 4.400,01 até R\$ 5.500,00.
* I	De R\$ 5.500,01 até R\$ 6.600,00.
* J	De R\$ 6.600,01 até R\$ 7.700,00.
* K	De R\$ 7.700,01 até R\$ 8.800,00.
* L	De R\$ 8.800,01 até R\$ 9.900,00.
* M	De R\$ 9.900,01 até R\$ 11.000,00.
* N	De R\$ 11.000,01 até R\$ 13.200,00.
* O	De R\$ 13.200,01 até R\$ 16.500,00.
* P	De R\$ 16.500,01 até R\$ 22.000,00.
* Q	Acima de R\$ 22.000,00.

```{r echo = F}
ggplot(data = enem, aes(x = Q006, fill = Q006)) +
  geom_bar() 
```

#### Q007

Em sua residência trabalha empregado(a) doméstico(a)?

* A	Não.
* B	Sim, um ou dois dias por semana.
* C	Sim, três ou quatro dias por semana.
* D	Sim, pelo menos cinco dias por semana.

```{r echo = F}
ggplot(data = enem, aes(x = Q007, fill = Q007)) +
  geom_bar() 
```

#### Q008

Na sua residência tem banheiro?

* A	Não.
* B	Sim, um.
* C	Sim, dois.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q008, fill = Q008)) +
  geom_bar() 
```

#### Q009

Na sua residência tem quartos para dormir?

* A	Não.
* B	Sim, um.
* C	Sim, dois.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q009, fill = Q009)) +
  geom_bar() 
```

#### Q010

Na sua residência tem carro?

* A	Não.
* B	Sim, um.
* C	Sim, dois.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q010, fill = Q010)) +
  geom_bar() 
```

#### Q011

Na sua residência tem motocicleta?

* A	Não.
* B	Sim, uma.
* C	Sim, duas.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q011, fill = Q011)) +
  geom_bar() 
```

#### Q012

Na sua residência tem geladeira?

* A	Não.
* B	Sim, uma.
* C	Sim, duas.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q012, fill = Q012)) +
  geom_bar() 
```

#### Q013

Na sua residência tem freezer (independente ou segunda porta da geladeira)?

* A	Não.
* B	Sim, um.
* C	Sim, dois.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q013, fill = Q013)) +
  geom_bar() 
```

#### Q014

Na sua residência tem máquina de lavar roupa? (o tanquinho NÃO deve ser considerado)

* A	Não.
* B	Sim, uma.
* C	Sim, duas.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q014, fill = Q014)) +
  geom_bar() 
```

#### Q015

Na sua residência tem máquina de secar roupa (independente ou em conjunto com a máquina de lavar roupa)?

* A	Não.
* B	Sim, uma.
* C	Sim, duas.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q015, fill = Q015)) +
  geom_bar() 
```

#### Q016

Na sua residência tem forno micro-ondas?

* A	Não.
* B	Sim, um.
* C	Sim, dois.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q016, fill = Q016)) +
  geom_bar() 
```

#### Q017

Na sua residência tem máquina de lavar louça?

* A	Não.
* B	Sim, uma.
* C	Sim, duas.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q017, fill = Q017)) +
  geom_bar() 
```

#### Q018

Na sua residência tem aspirador de pó?

* A	Não.
* B	Sim.

```{r echo = F}
ggplot(data = enem, aes(x = Q018, fill = Q018)) +
  geom_bar() 
```

#### Q019

Na sua residência tem televisão em cores?

* A	Não.
* B	Sim, uma.
* C	Sim, duas.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q019, fill = Q019)) +
  geom_bar() 
```

#### Q020

Na sua residência tem aparelho de DVD?

* A	Não.
* B	Sim.

```{r echo = F}
ggplot(data = enem, aes(x = Q020, fill = Q020)) +
  geom_bar() 
```

#### Q021

Na sua residência tem TV por assinatura?

* A	Não.
* B	Sim.

```{r echo = F}
ggplot(data = enem, aes(x = Q021, fill = Q021)) +
  geom_bar() 
```

#### Q022

Na sua residência tem telefone celular?

* A	Não.
* B	Sim, um.
* C	Sim, dois.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q022, fill = Q022)) +
  geom_bar() 
```

#### Q023

Na sua residência tem telefone fixo?

* A	Não.
* B	Sim.

```{r echo = F}
ggplot(data = enem, aes(x = Q023, fill = Q023)) +
  geom_bar() 
```

#### Q024

Na sua residência tem computador?

* A	Não.
* B	Sim, um.
* C	Sim, dois.
* D	Sim, três.
* E	Sim, quatro ou mais.

```{r echo = F}
ggplot(data = enem, aes(x = Q024, fill = Q024)) +
  geom_bar() 
```

#### Q025

Na sua residência tem acesso à Internet?

* A	Não.
* B	Sim.

```{r echo = F}
ggplot(data = enem, aes(x = Q025, fill = Q025)) +
  geom_bar() 
```

```{r}
ggplot(data = enem, aes(x = Q006, group = TP_ESCOLA, fill = TP_ESCOLA)) +
  geom_bar(aes(y = ..prop.., stat = "count", fill = TP_ESCOLA)) +
  geom_text(aes(label = scales::percent(..prop.., accuracy = .01),
                y = ..prop..), 
            stat = "count",  position = position_stack(vjust = .5)) +
  ggtitle("Grupo de renda\npor Tipo de escola") +
  scale_y_continuous(labels = scales::percent) +
  theme_bw() +
  scale_fill_discrete(name = "Tipo de Escola") +
  scale_color_discrete(name = "Tipo de Escola")
```

## RESULTADOS

### gráfico coroplético

```{r "Nota média por estado"}
cidades = read_municipality() %>% mutate(code_muni = as.factor(code_muni))
estados = read_state() %>% mutate(CO_UF_ESC = code_state)
# regioes = read_region() %>% mutate(REGIAO = as.factor(ifelse(name_region == "Centro Oeste", "Centro-Oeste", name_region)))
regioes = read_region() %>% mutate(REGIAO = factor(name_region))
# cidades$code_muni = as.factor(cidades$code_muni)
# estados$CO_UF_ESC = estados$code_state

# regioes = regioes %>% mutate(REGIAO = factor(ifelse(regioes$name_region == "Centro Oeste", "Centro-Oeste", regioes$name), labels = c( "Centro-Oeste",  "Nordeste", "Norte", "Sudeste", "Sul"))) %>% select(-name_region)

# regioes = regioes %>% mutate(name_region = ifelse(name_region == "Centro Oeste", "Centro-Oeste", name_region)) %>% mutate(REGIAO = factor(name_region))

# enem = enem %>% mutate(REGIAO = ifelse(REGIAO == "Centro Oeste", "Centro-Oeste", REGIAO))
# View(mapa)
```


```{r "Nota média por estado"}
# centro.mun <- read.csv("https://raw.githubusercontent.com/kelvins/Municipios-Brasileiros/main/csv/municipios.csv")
# centro.est <- read.csv("https://raw.githubusercontent.com/kelvins/Municipios-Brasileiros/main/csv/estados.csv")
# centro.mun$codigo_uf = num(centro.mun$codigo_uf)


# teste = enem %>%
#   group_by(CO_UF_ESC) %>%
#   summarise(NOTA = mean(NOTA_FINAL)) %>% rename(codigo_uf = CO_UF_ESC)
# dados <-
mapabr1 = merge(estados, enem %>%
  group_by(CO_UF_ESC) %>%
  summarise(NOTA = mean(NOTA_FINAL)), by = "CO_UF_ESC", all = T) %>%
ggplot(aes(geometry = geometry)) + 

# centro <- merge(dados, centro.est, by = "codigo_uf")

# ggplot(data = dados, aes(geometry = geometry)) + 
  geom_sf(aes(fill = NOTA), 
           color = "transparent", size = 0.0
          ) +
  # facet_wrap(~TP_ESCOLA) + 
  scale_fill_gradient(low = "red", high = "green", 
                      na.value = "white", name = "Nota") +
  theme_bw() +
  # scale_fill_distiller(palette = "Reds", limits=c(0, 1000),
                       # name="Code_muni") + 
  geom_text(aes(label = abbrev_state),
                           stat = "sf_coordinates",
            # fontface = "bold"
            ) +
  theme(panel.grid = element_line(colour = "transparent"),
        panel.background = element_blank(), axis.text = element_blank(),
        axis.ticks = element_blank()) +
  labs(x = element_blank(), y = element_blank()) +
  ggtitle("a. Nota média por estado")
```

```{r "Nota média por estado"}
# centro.mun <- read.csv("https://raw.githubusercontent.com/kelvins/Municipios-Brasileiros/main/csv/municipios.csv")
# centro.est <- read.csv("https://raw.githubusercontent.com/kelvins/Municipios-Brasileiros/main/csv/estados.csv")
# centro.mun$codigo_uf = num(centro.mun$codigo_uf)
# teste = enem %>%
#   group_by(REGIAO) %>%
#   summarise(NOTA = mean(NOTA_FINAL))
mapabr2 = merge(regioes %>% select(-c(name_region, code_region)), enem %>%
  group_by(REGIAO) %>%
  summarise(NOTA = mean(NOTA_FINAL)), by = "REGIAO", all = T) %>%
ggplot(aes(geometry = geometry)) + 
  geom_sf(aes(fill = NOTA), 
           color = "transparent", size = 0.0) +
  # facet_wrap(~TP_ESCOLA) + 
  scale_fill_gradient(low = "red", high = "green", 
                      na.value = "white", name = "Nota média") +
  theme_bw() +
  # scale_fill_distiller(palette = "Reds", limits=c(0, 1000),
                       # name="Code_muni") + 
  geom_text(aes(label = REGIAO),
                           stat = "sf_coordinates",
            # fontface = "bold"
            ) +
  theme(panel.grid = element_line(colour = "transparent"),
        panel.background = element_blank(), axis.text = element_blank(),
        axis.ticks = element_blank()) +
  labs(x = element_blank(), y = element_blank()) +
  ggtitle("b. Nota média por região")
```

```{r}
gridExtra::grid.arrange(mapabr1, mapabr2, ncol = 2)
```

### Testes da média

#### Nota por tipo de escola

```{r}
enem %>% group_by(TP_ESCOLA) %>%
  summarise(mean(NOTA_FINAL), median(NOTA_FINAL), sd(NOTA_FINAL))

teste = aov(NOTA_FINAL ~ TP_ESCOLA, data = enem)
summary(teste)
TukeyHSD(teste)

enem %>% group_by(TP_ESCOLA) %>%
  ggplot(aes(x = reorder(TP_ESCOLA, NOTA_FINAL, FUN = median, decreasing = T), y = NOTA_FINAL, fill = reorder(TP_ESCOLA, NOTA_FINAL, FUN = median, decreasing = T))) +
  geom_boxplot() +
  theme_bw() +
  labs(x = "TP_ESCOLA") +
  theme(legend.position = "none")
```

#### Nota por cor/raça

```{r}
enem %>% group_by(TP_COR_RACA) %>%
  summarise(mean(NOTA_FINAL), median(NOTA_FINAL), sd(NOTA_FINAL))

teste = aov(NOTA_FINAL ~ TP_COR_RACA, data = enem)
summary(teste)
TukeyHSD(teste)

enem %>% group_by(TP_COR_RACA) %>%
  ggplot(aes(x = reorder(TP_COR_RACA, NOTA_FINAL, FUN = median, decreasing = T), y = NOTA_FINAL, fill = reorder(TP_COR_RACA, NOTA_FINAL, FUN = median, decreasing = T))) +
  geom_boxplot() +
  theme_bw() +
  labs(x = "TP_COR_RACA") +
  theme(legend.position = "none")


## agrupando cor/raça != branca
enem %>%
  mutate(COR2 = ifelse(TP_COR_RACA != "Branca", "Não branca", "Branca")) %>%
  group_by(COR2) %>%
    ggplot(aes(x = reorder(COR2, NOTA_FINAL, FUN = median, decreasing = T), y = NOTA_FINAL, fill = reorder(COR2, NOTA_FINAL, FUN = median, decreasing = T))) +
    geom_boxplot() +
    theme_bw() +
    labs(x = "COR2") +
    theme(legend.position = "none")
```

#### Nota por sexo

```{r}
enem %>% group_by(TP_SEXO) %>%
  summarise(mean(NOTA_FINAL), median(NOTA_FINAL), sd(NOTA_FINAL))

teste = aov(NOTA_FINAL ~ TP_SEXO, data = enem)
summary(teste)
TukeyHSD(teste)

PMCMRplus::kwAllPairsNemenyiTest(enem$NOTA_FINAL ~ enem$TP_SEXO)

enem %>% group_by(TP_SEXO) %>%
  ggplot(aes(x = TP_SEXO, y = NOTA_FINAL, fill = TP_SEXO)) +
  geom_boxplot() +
  theme_bw() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("#00BFC4", "#F8766D"))
```

#### Nota por região

```{r}
enem %>% group_by(REGIAO)  %>%
  summarise(mean(NOTA_FINAL), median(NOTA_FINAL), sd(NOTA_FINAL))

teste = aov(NOTA_FINAL ~ REGIAO, data = enem)
summary(teste)
TukeyHSD(teste)

PMCMRplus::kwAllPairsNemenyiTest(enem$NOTA_FINAL ~ enem$TP_COR_RACA)

enem %>% group_by(REGIAO) %>%
  ggplot(aes(x = reorder(REGIAO, NOTA_FINAL, FUN = median, decreasing = T), y = NOTA_FINAL, fill = reorder(REGIAO, NOTA_FINAL, FUN = median, decreasing = T))) +
  geom_boxplot() +
  theme_bw() +
  labs(x = "REGIAO") +
  theme(legend.position = "none")
```

#### Nota por Critério Brasil

```{r}
enem %>% group_by(CRITERIO) %>%
  summarise(mean(NOTA_FINAL), median(NOTA_FINAL), sd(NOTA_FINAL))

teste = aov(NOTA_FINAL ~ CRITERIO, data = enem)
summary(teste)
TukeyHSD(teste)

enem %>% group_by(CRITERIO) %>% select(NOTA_FINAL) %>% do(tidy(kruskal.test(x = .$NOTA_FINAL, g = .$NOTA_FINAL)))

PMCMRplus::kwAllPairsNemenyiTest(enem$NOTA_FINAL ~ enem$CRITERIO)

enem %>% group_by(CRITERIO) %>%
  ggplot(aes(x = CRITERIO, y = NOTA_FINAL, fill = CRITERIO)) +
  geom_boxplot() +
  theme_bw() +
  theme(legend.position = "none")
```

#### Nota por acesso à internet

```{r}
enem %>% group_by(Q025)  %>%
  summarise(mean(NOTA_FINAL), median(NOTA_FINAL), sd(NOTA_FINAL))

teste = aov(NOTA_FINAL ~ Q025, data = enem)
summary(teste)
TukeyHSD(teste)

enem %>% group_by(Q025) %>% select(NOTA_FINAL) %>% do(tidy(kruskal.test(x = .$NOTA_FINAL, g = .$Q025)))

PMCMRplus::kwAllPairsNemenyiTest(enem$NOTA_FINAL ~ enem$Q025)

enem %>% group_by(Q025) %>%
  ggplot(aes(x = reorder(Q025, NOTA_FINAL, FUN = median, decreasing = T), y = NOTA_FINAL), fill = Q025) +
  geom_boxplot(aes(fill = Q025)) +
  theme_bw() +
  labs(x = "Q025") +
  scale_fill_manual(values = c("#00BFC4", "#F8766D")) +
  theme(legend.position = "none")
```

#### Nota por escolaridade do pai

```{r}
enem %>% group_by(Q001)  %>%
  summarise(mean(NOTA_FINAL), median(NOTA_FINAL), sd(NOTA_FINAL))

teste = aov(NOTA_FINAL ~ Q001, data = enem)
summary(teste)
TukeyHSD(teste)

enem %>% group_by(Q001) %>%
  ggplot(aes(x = Q001, y = NOTA_FINAL, fill = Q001)) +
  geom_boxplot() +
  theme_bw() +
  theme(legend.position = "none")
```

#### Nota por escolaridade da mãe

```{r}
enem %>% group_by(Q002)  %>%
  summarise(mean(NOTA_FINAL), median(NOTA_FINAL), sd(NOTA_FINAL))

teste = aov(NOTA_FINAL ~ Q001, data = enem)
summary(teste)
TukeyHSD(teste)

enem %>% group_by(Q002) %>%
  ggplot(aes(x = reorder(Q002, NOTA_FINAL, FUN = median, decreasing = T), y = NOTA_FINAL, fill = reorder(Q002, NOTA_FINAL, FUN = median, decreasing = T))) +
  geom_boxplot() +
  labs(x = "Q002") +
  theme_bw() +
  theme(legend.position = "none")
```

#### Nota por lingua

```{r}
enem %>% group_by(TP_LINGUA)  %>%
  summarise(mean(NOTA_FINAL), median(NOTA_FINAL), sd(NOTA_FINAL))

teste = aov(NOTA_FINAL ~ TP_LINGUA, data = enem)
summary(teste)
TukeyHSD(teste)

enem %>% group_by(TP_LINGUA) %>%
  ggplot(aes(x = TP_LINGUA, y = NOTA_FINAL, fill = TP_LINGUA)) +
  geom_boxplot() +
  theme_bw() +
  theme(legend.position = "none")
```

# DAG automático


```{r}
pcalg_fit_mix <- pc(suffStat = as.data.frame(enem2), indepTest = mixCItest, alpha = 0.05,
                    labels = colnames(as.data.frame(enem2)), u2pd="relaxed",
                    skel.method = "stable.fast", maj.rule = TRUE, solve.confl = TRUE)

mygraph <- function(pcgraph){
  g <- as.bn(pcgraph, check.cycles = FALSE)
  graphviz.plot(g, shape = "ellipse")
}
mygraph(pcalg_fit_mix)
```

```{r}
pcalg_fit_mix2 <- pc(suffStat = as.data.frame(enem2), indepTest = mixCItest, alpha = 0.05,
                    labels = colnames(as.data.frame(enem2)), u2pd="relaxed",
                    skel.method = "stable.fast", maj.rule = TRUE, solve.confl = TRUE)

mygraph <- function(pcgraph){
  g <- as.bn(pcgraph, check.cycles = FALSE)
  graphviz.plot(g, shape = "ellipse")
}
mygraph(pcalg_fit_mix2)
```



```{r}
# cl = makeCluster(7)

# pcalg_fit_mix3 <- fci(suffStat = as.data.frame(enem2), indepTest = mixCItest,
#                       alpha = 0.05,
#                     labels = colnames(as.data.frame(enem2)),
#                     skel.method = "stable.fast",
#                     maj.rule = T)

# colnames(as.data.frame(enem2))
aux = matrix(data = F, ncol = 10, nrow = 10)
aux[2, 6] = aux[6, 2] = T
colnames(aux) = rownames(aux) = colnames(as.data.frame(enem2))

pcalg_fit_mix3 = pc(suffStat = as.data.frame(enem2), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem2)), u2pd="relaxed",
                    skel.method = "stable.fast",
                    maj.rule = T,  solve.confl = T,
                    fixedEdges = aux)

# stopCluster(cl)

mygraph <- function(pcgraph){
  g <- as.bn(pcgraph, check.cycles = FALSE)
  graphviz.plot(g, shape = "ellipse")
}
mygraph(pcalg_fit_mix3)
# plot(pcalg_fit_mix3)
```

```{r}
# library(tpc)
# library(bnlearn)
pcalg_fit_mix3 = tpc(as.data.frame(enem2), indepTest = mixCItest, alpha = .01, labels = colnames(enem2), context.tier = c("CRIT", "ESC"))
mygraph(pcalg_fit_mix3)
```



```{r}
pcalg_fit_mix4 <- fci(suffStat = as.data.frame(enem2), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem2)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = aux)

# mygraph <- function(pcgraph){
#   g <- as.bn(pcgraph, check.cycles = FALSE)
#   graphviz.plot(g, shape = "ellipse")
# }
# mygraph(pcalg_fit_mix4)
plot(pcalg_fit_mix4)

# pcalg_fit_mix5 <- fci_parallel(suffStat = as.data.frame(enem2),
#                               indepTest = mixCItest, alpha = .01,
#                               labels = colnames(as.data.frame(enem2)),
#                               skel.method = "parallel",
#                               mem.efficient = F,
#                               num.cores = 8,
#                               maj.rule = T)
# 
# mygraph <- function(pcgraph){
#   g <- as.bn(pcgraph, check.cycles = FALSE)
#   graphviz.plot(g, shape = "ellipse")
# }
# mygraph(pcalg_fit_mix5)
```



```{r}
pcalg_fit_mix5 <- rfci(suffStat = as.data.frame(enem2), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem2)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = aux)
# fci_parallel()

# mygraph <- function(pcgraph){
#   g <- as.bn(pcgraph, check.cycles = FALSE)
#   graphviz.plot(g, shape = "ellipse")
# }
# mygraph(pcalg_fit_mix4)
plot(pcalg_fit_mix5)

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/DAG rfci alpha 0.05 (fixedEdges crit-esc).png", width = 14 + 15/64, height = 7 + 43/64)

# pcalg_fit_mix5 <- fci_parallel(suffStat = as.data.frame(enem2),
#                               indepTest = mixCItest, alpha = .01,
#                               labels = colnames(as.data.frame(enem2)),
#                               skel.method = "parallel",
#                               mem.efficient = F,
#                               num.cores = 8,
#                               maj.rule = T)
# 
# mygraph <- function(pcgraph){
#   g <- as.bn(pcgraph, check.cycles = FALSE)
#   graphviz.plot(g, shape = "ellipse")
# }
# mygraph(pcalg_fit_mix5)

```

```{r}
pcalg_fit_mix6 <- fciPlus(suffStat = as.data.frame(enem2), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem2)))
# fci_parallel()

# mygraph <- function(pcgraph){
#   g <- as.bn(pcgraph, check.cycles = FALSE)
#   graphviz.plot(g, shape = "ellipse")
# }
# mygraph(pcalg_fit_mix4)
plot(pcalg_fit_mix6)

ggsave("D:/Users/brodr/Documents/ufjf/TCC/imagens/DAG fciplus alpha 0.05 (fixedEdges crit-esc).png", width = 14 + 15/64, height = 7 + 43/64)
```



```{r}
# bnlearn_fit_mix <- pc.stable(enem2, test = "mi-cg", alpha = 0.05)
# graphviz.plot(bnlearn_fit_mix, shape = "ellipse")


# data("gmG")
score = new("GaussL0penIntScore", enem3)
plot(ges(score)$essgraph)

score2 = enem2 %>% summarise_each(funs(chisq.test(., 
           enem2$NOTA)$statistic), -one_of("NOTA"))
ges(enem2)

```


```{r}
wl = matrix(c("CRIT", "ESC"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

wl1 = matrix(c("CRIT", "NOTA"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

wl2 = matrix(c("Q001", "NOTA"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

wl3 = matrix(c("Q002", "NOTA"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

wl4 = matrix(c("Q001", "NOTA", "Q002", "NOTA"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

wl5 = matrix(c("CRIT", "ESC", "Q001", "NOTA"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

wl6 = matrix(c("CRIT", "ESC", "Q002", "NOTA"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

wl7 = matrix(c("CRIT", "ESC", "Q001", "NOTA", "Q002", "NOTA"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

```

```{r}
bl1 = matrix(c("CRIT", "SEX", "NET", "SEX", "ESC", "SEX", "COR", "SEX",
               "Q001", "SEX", "Q002", "SEX", "ESC", "CRIT", "CRIT", "COR",
               "ESC", "Q001", "ESC", "Q002", "SEX", "COR", "SEX", "CRIT",
               "NET", "LOC", "REG", "SEX", "LOC", "SEX"),
             ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

bl2 = matrix(c("ESC", "Q001", "ESC", "Q002", "ESC", "COR", "ESC", "CRIT",
               "CRIT", "COR"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

bl3 = matrix(c("ESC", "Q002", "ESC", "COR", "ESC", "CRIT",
               "CRIT", "COR"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

wl8 =  matrix(c("Q002", "NOTA"),
            ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))

```


```{r}
bnlearn_hc = bnlearn::hc(enem2, 
                         # whitelist = wl, 
                         blacklist = bl2
                         )
graphviz.plot(bnlearn_hc, shape = "ellipse"
              # , highlight = list(arcs = wl)
              )
```


```{r}
bnlearn_tabu = bnlearn::tabu(enem2,
                             whitelist = wl4,
                             # tabu = 1000
                             )
graphviz.plot(bnlearn_tabu, shape = "ellipse", highlight = list(arcs = wl4))
```

```{r}
# library(MRPC)
# suf = RobustCor(as.data.frame(enem2), Beta = .005)
mrpc1 =  MRPC(as.data.frame(enem2), as.data.frame(enem2), GV = 0, labels = colnames(enem2), indepTest = 'mixCItest', FDRcontrol = 'NONE', alpha = .01, FDR = .01)
plot(mrpc1)
```




## REMOVENDO SEX, LOC, NET


```{r}
pcalg_fit2_mix <- pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     # fixedEdges = aux
                     )
mygraph(pcalg2_fit_mix)

```

```{r}
# aux
# aux2
aux2 = aux[-c(3,4), -c(3,4)]

pcalg_fit2_mix2 = pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = aux2
                     )
mygraph(pcalg_fit2_mix2)
```


```{r}
####fixando renda-escola, q001-nota, q002-nota
aux3 = aux
aux3[8:9, 1] = aux3[1, 8:9] = T

pcalg_fit3_mix1 = pc(suffStat = as.data.frame(enem2),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem2), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = aux3
                     )
mygraph(pcalg_fit3_mix1)

```

```{r}
####fixando renda-escola, q001-nota
aux4 = aux
aux4[8, 1] = aux4[1, 8] = T

pcalg_fit3_mix2 = pc(suffStat = as.data.frame(enem2),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem2), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = aux4
                     )
mygraph(pcalg_fit3_mix2)
```

```{r}
aux5 = aux
aux5[9,1] = aux5[1,9] = T

pcalg_fit3_mix3 = pc(suffStat = as.data.frame(enem2),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem2), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = aux5
                     )
mygraph(pcalg_fit3_mix3)

```


```{r}
aux6 = aux
aux6[,] = F
aux6[8:9, 1] = aux6[1,8:9] = T

pcalg_fit3_mix4 = pc(suffStat = as.data.frame(enem2),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem2), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = aux6
                     )
mygraph(pcalg_fit3_mix4)
```

```{r}
aux7 = aux
aux7[,] = F
aux7[1,8] = aux7[8,1] = T

pcalg_fit3_mix5 = pc(suffStat = as.data.frame(enem2),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem2), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = aux7
                     )
mygraph(pcalg_fit3_mix5)
```


```{r}
aux8 = aux
aux8[,] = F
aux8[1,9] = aux8[9,1] = T

pcalg_fit3_mix6 = pc(suffStat = as.data.frame(enem2),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem2), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = aux8
                     )
mygraph(pcalg_fit3_mix6)
```

```{r}
# aux5

pcalg_fit3_mix9 = fci(suffStat = as.data.frame(enem2), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem2)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = aux5)
plot(pcalg_fit3_mix9)
```

```{r}
# aux7

pcalg_fit3_mix11 = fci(suffStat = as.data.frame(enem2), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem2)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = aux7)
plot(pcalg_fit3_mix11)
```

```{r}
aux8 = aux
aux8[,] = F
aux8[1,9] = aux8[9,1] = T
```


```{r}
####fixando renda-escola, q001-nota
aux4 = aux
aux4[8, 1] = aux4[1, 8] = T

pcalg_fit3_mix13 = fci(suffStat = as.data.frame(enem2), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem2)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = aux4)
plot(pcalg_fit3_mix13)
```


```{r}
enem3 = enem2 %>% select(-SEX, -LOC, -NET)
auxB = aux[-c(3, 7, 10),-c(3, 7, 10)] ####fixando renda-escola
```


```{r}
Sys.time()
pcalg_fit4_mix1 = pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     # fixedEdges = auxB
                     )
mygraph(pcalg_fit4_mix1)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit4_mix2 = fci(suffStat = as.data.frame(enem3), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem3)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    # fixedEdges = auxB
                    )
plot(pcalg_fit4_mix2)
Sys.time()
```





```{r}
###fixando renda-escola
# auxB

Sys.time()
pcalg_fit4_mix3 = pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxB
                     )
mygraph(pcalg_fit4_mix3)
Sys.time()
```


```{r}
###fixando renda-escola
# auxB

Sys.time()
pcalg_fit4_mix4 = fci(suffStat = as.data.frame(enem3), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem3)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxB
                    )
plot(pcalg_fit4_mix4)
Sys.time()
```


```{r}
###fixando q001-nota
auxB2 = auxB
auxB2[,] = F
auxB2[1,6] = auxB2[6,1] = T

Sys.time()
pcalg_fit4_mix5 = pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxB2
                     )
mygraph(pcalg_fit4_mix5)
Sys.time()
```


```{r}
###fixando q001-nota
# auxB2 = auxB
# auxB2[,] = F
# auxB2[1,6] = auxB2[6,1] = T
# auxB2

Sys.time()
pcalg_fit4_mix6 = fci(suffStat = as.data.frame(enem3), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem3)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxB2
                    )
plot(pcalg_fit4_mix6)
Sys.time()
```





```{r}
###fixando q002-nota
auxB3 = auxB
auxB3[,] = F
auxB3[1,7] = auxB3[7,1] = T

Sys.time()
pcalg_fit4_mix7 = pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxB3
                     )
mygraph(pcalg_fit4_mix7)
Sys.time()
```


```{r}
#fixando q002-nota
# auxB3 = auxB
# auxB3[,] = F
# auxB3[1,7] = auxB2[7,1] = T
# auxB3

Sys.time()
pcalg_fit4_mix8 = fci(suffStat = as.data.frame(enem3), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem3)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxB3
                    )
plot(pcalg_fit4_mix8)
Sys.time()
```




```{r}
###fixando renda-escola + q001-nota
auxB4 = auxB
auxB4[1,6] = auxB4[6,1] = T
auxB4

Sys.time()
pcalg_fit4_mix9 = pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxB4
                     )
mygraph(pcalg_fit4_mix9)
Sys.time()
```


```{r}
###fixando renda-escola + q001-nota
# auxB4 = auxB
# auxB4[1,6] = auxB4[6,1] = T
# auxB4

Sys.time()
pcalg_fit4_mix10 = fci(suffStat = as.data.frame(enem3), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem3)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxB4
                    )
plot(pcalg_fit4_mix10)
Sys.time()
```




```{r}
###fixando renda-escola + q002-nota
auxB5 = auxB
auxB5[1,7] = auxB5[7,1] = T
auxB5

Sys.time()
pcalg_fit4_mix11 = pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxB5
                     )
mygraph(pcalg_fit4_mix11)
Sys.time()
```


```{r}
###fixando renda-escola + q001-nota
# auxB5 = auxB
# auxB5[1,7] = auxB4[7,1] = T
# auxB5

Sys.time()
pcalg_fit4_mix12 = fci(suffStat = as.data.frame(enem3), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem3)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxB5
                    )
plot(pcalg_fit4_mix12)
Sys.time()
```




```{r}
###fixando q001-nota + q002-nota
auxB6 = auxB
auxB6[,] = F
auxB6[1,6:7] = auxB6[6:7,1] = T
auxB6

Sys.time()
pcalg_fit4_mix13 = pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxB6
                     )
mygraph(pcalg_fit4_mix13)
Sys.time()
```


```{r}
###fixando q001-nota + q002-nota
# auxB6 = auxB
# auxB6[,] = F
# auxB6[1,6:7] = auxB6[6:7,1] = T
# auxB6

Sys.time()
pcalg_fit4_mix14 = fci(suffStat = as.data.frame(enem3), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem3)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxB6
                    )
plot(pcalg_fit4_mix14)
Sys.time()
```





```{r}
###fixando renda-escola + q001-nota + q002-nota
auxB7 = auxB
auxB7[1,6:7] = auxB7[6:7,1] = T
auxB7

Sys.time()
pcalg_fit4_mix15 = pc(suffStat = as.data.frame(enem3),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem3), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxB7
                     )
mygraph(pcalg_fit4_mix15)
Sys.time()
```


```{r}
###fixando renda-escola + q001-nota + q002-nota
# auxB7 = auxB
# auxB7[1,6:7] = auxB7[6:7,1] = T
# auxB7


Sys.time()
pcalg_fit4_mix16 = fci(suffStat = as.data.frame(enem3), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem3)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxB7
                    )
plot(pcalg_fit4_mix16)
Sys.time()
```






```{r}
####removendo escolaridade pai (q001)
enem4 = enem3 %>% select(-Q001)
auxC = auxB[-6, -6]
```


```{r}
Sys.time()
pcalg_fit5_mix1 = pc(suffStat = as.data.frame(enem4),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem4), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     # fixedEdges = auxB
                     )
mygraph(pcalg_fit5_mix1)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit5_mix2 = fci(suffStat = as.data.frame(enem4), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem4)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    # fixedEdges = auxB
                    )
plot(pcalg_fit5_mix2)
Sys.time()
```




```{r}
# auxC

Sys.time()
pcalg_fit5_mix3 = pc(suffStat = as.data.frame(enem4),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem4), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxC
                     )
mygraph(pcalg_fit5_mix3)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit5_mix4 = fci(suffStat = as.data.frame(enem4), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem4)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxC
                    )
plot(pcalg_fit5_mix4)
Sys.time()
```




```{r}
###fixando q002-nota
# auxC
auxC2 = auxC
auxC2[,] = F
auxC2[1,6] = auxC2[6,1] = T
  
    
Sys.time()
pcalg_fit5_mix5 = pc(suffStat = as.data.frame(enem4),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem4), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxC2
                     )
mygraph(pcalg_fit5_mix5)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit5_mix6 = fci(suffStat = as.data.frame(enem4), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem4)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxC2
                    )
plot(pcalg_fit5_mix6)
Sys.time()
```





```{r}
###fixando renda-escola + q002-nota
# auxC
auxC3 = auxC
auxC3[1,6] = auxC3[6,1] = T
auxC3  

Sys.time()
pcalg_fit5_mix7 = pc(suffStat = as.data.frame(enem4),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem4), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxC3
                     )
mygraph(pcalg_fit5_mix7)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit5_mix8 = fci(suffStat = as.data.frame(enem4), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem4)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxC3
                    )
plot(pcalg_fit5_mix8)
Sys.time()
```



```{r}
####removendo escolaridade pai (q001)
enem4 = enem3 %>% select(-Q002)
auxC = auxB[-7, -7]
```


```{r}
Sys.time()
pcalg_fit5_mix1 = pc(suffStat = as.data.frame(enem4),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem4), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     # fixedEdges = auxB
                     )
mygraph(pcalg_fit5_mix1)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit5_mix2 = fci(suffStat = as.data.frame(enem4), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem4)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    # fixedEdges = auxB
                    )
plot(pcalg_fit5_mix2)
Sys.time()
```




```{r}
# auxC

Sys.time()
pcalg_fit5_mix3 = pc(suffStat = as.data.frame(enem4),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem4), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxC
                     )
mygraph(pcalg_fit5_mix3)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit5_mix4 = fci(suffStat = as.data.frame(enem4), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem4)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxC
)
plot(pcalg_fit5_mix4)
Sys.time()
```




```{r}
###fixando q002-nota
# auxC
auxC2 = auxC
auxC2[,] = F
auxC2[1,6] = auxC2[6,1] = T
  
    
Sys.time()
pcalg_fit5_mix5 = pc(suffStat = as.data.frame(enem4),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem4), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxC2
                     )
mygraph(pcalg_fit5_mix5)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit5_mix6 = fci(suffStat = as.data.frame(enem4), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem4)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxC2
                    )
plot(pcalg_fit5_mix6)
Sys.time()
```





```{r}
###fixando renda-escola + q002-nota
# auxC
auxC3 = auxC
auxC3[1,6] = auxC3[6,1] = T
auxC3  

Sys.time()
pcalg_fit5_mix7 = pc(suffStat = as.data.frame(enem4),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem4), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     fixedEdges = auxC3
                     )
mygraph(pcalg_fit5_mix7)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit5_mix8 = fci(suffStat = as.data.frame(enem4), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(as.data.frame(enem4)),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    fixedEdges = auxC3
                    )
plot(pcalg_fit5_mix8)
Sys.time()
```



## AGRUPANDO Q002-B COM Q002-H
 
```{r}
# enem = enem %>% mutate(Q102 = fct_collapse(Q002, B = c("B", "H")))
enem2 = enem2 %>% mutate(Q102 = fct_collapse(Q002, B = c("B", "H"))) %>% select(-Q002)
```

```{r}
Sys.time()
pcalg_fit6_mix1 = pc(suffStat = as.data.frame(enem2 %>% mutate(Q102 = fct_collapse(Q002, B = c("B", "H"))) %>% select(-Q002)),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem2 %>% mutate(Q102 = fct_collapse(Q002, B = c("B", "H"))) %>% select(-Q002)), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     # fixedEdges = auxC3
                     )
mygraph(pcalg_fit6_mix1)
Sys.time()
```



```{r}
Sys.time()
pcalg_fit6_mix2 = pc(suffStat = as.data.frame(enem2 %>% mutate(Q102 = fct_collapse(Q002, B = c("B", "H"))) %>% select(-c(Q001, Q002, SEX, LOC, NET))),
                     indepTest = mixCItest, alpha = 0.05,
                     labels = colnames(enem2 %>% mutate(Q102 = fct_collapse(Q002, B = c("B", "H"))) %>% select(-c(Q001, Q002, SEX, LOC, NET))), u2pd="relaxed",
                     skel.method = "stable.fast",
                     maj.rule = T, solve.confl = T,
                     # fixedEdges = auxC3
                     )
mygraph(pcalg_fit6_mix2)
Sys.time()
```


```{r}
Sys.time()
pcalg_fit6_mix3 = fci(suffStat = as.data.frame(enem2 %>% mutate(Q102 = fct_collapse(Q002, B = c("B", "H"))) %>% select(-c(Q001, Q002, SEX, LOC, NET))), indepTest = mixCItest,
                    alpha = 0.05,
                    labels = colnames(enem2 %>% mutate(Q102 = fct_collapse(Q002, B = c("B", "H"))) %>% select(-c(Q001, Q002, SEX, LOC, NET))),
                    skel.method = "stable.fast",
                    maj.rule = T,
                    # fixedEdges = auxC3
                    )
plot(pcalg_fit6_mix3)
Sys.time()
```


